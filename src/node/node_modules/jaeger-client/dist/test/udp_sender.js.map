{"version":3,"sources":["../../test/udp_sender.js"],"names":["PORT","HOST","describe","server","tracer","thrift","sender","assertThriftSpanEqual","assert","spanOne","spanTwo","deepEqual","traceIdLow","traceIdHigh","spanId","parentSpanId","equal","operationName","references","flags","startTime","duration","beforeEach","createSocket","bind","reporter","setProcess","_process","entryPoint","join","__dirname","allowOptionalArguments","allowFilesystemAccess","afterEach","close","it","done","startSpan","finish","spanToThrift","maxSpanBytes","_calcSpanSize","_maxSpanBytes","on","msg","remote","thriftObj","Agent","emitBatch","argumentsMessageRW","readFrom","batch","value","body","isOk","spans","length","process","serviceName","actualTags","sortBy","tags","o","key","append","flush","parentContext","context","childOfContext","childOfRef","Reference","REFERENCE_CHILD_OF","followsFromContext","followsFromRef","REFERENCE_FOLLOWS_FROM","options","traceId","parentId","each","span","childOf","ref","expectedTraceId","expectedParentId","isNotOk","spanSize","responseOne","responseTwo","err","numSpans","_batch","_totalSpanBytes","spanThatExceedsCapacity","setTag","expectedBufferSize","_logger","info","console","log","error","to","have","string","response","_host","node0_10_12","satisfies","version","expectedLogs"],"mappings":"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","file":"udp_sender.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport {assert, expect} from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport dgram from 'dgram';\nimport fs from 'fs';\nimport path from 'path';\nimport semver from 'semver';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport RemoteReporter from '../src/reporters/remote_reporter.js';\nimport opentracing from 'opentracing';\nimport Tracer from '../src/tracer.js';\nimport {Thrift} from 'thriftrw';\nimport ThriftUtils from '../src/thrift.js';\nimport UDPSender from '../src/reporters/udp_sender.js';\nimport NullLogger from '../src/logger.js';\n\nconst PORT = 6832;\nconst HOST = '127.0.0.1';\n\ndescribe('udp sender should', () => {\n    let server;\n    let tracer;\n    let thrift;\n    let sender;\n\n    function assertThriftSpanEqual(assert, spanOne, spanTwo) {\n        assert.deepEqual(spanOne.traceIdLow, spanTwo.traceIdLow);\n        assert.deepEqual(spanOne.traceIdHigh, spanTwo.traceIdHigh);\n        assert.deepEqual(spanOne.spanId, spanTwo.spanId);\n        assert.deepEqual(spanOne.parentSpanId, spanTwo.parentSpanId);\n        assert.equal(spanOne.operationName, spanTwo.operationName);\n        assert.deepEqual(spanOne.references, spanTwo.references);\n        assert.equal(spanOne.flags, spanTwo.flags);\n        assert.deepEqual(spanOne.startTime, spanTwo.startTime);\n        assert.deepEqual(spanOne.duration, spanTwo.duration);\n    }\n\n    beforeEach(() => {\n        server = dgram.createSocket('udp4');\n        server.bind(PORT, HOST);\n        let reporter = new InMemoryReporter();\n        tracer = new Tracer(\n            'test-service-name',\n            reporter,\n            new ConstSampler(true)\n        );\n        sender = new UDPSender();\n        sender.setProcess(reporter._process);\n        thrift = new Thrift({\n            entryPoint: path.join(__dirname, '../src/thriftrw-idl/agent.thrift'),\n            allowOptionalArguments: true,\n            allowFilesystemAccess: true\n        });\n    });\n\n    afterEach(() => {\n        tracer.close();\n        server.close();\n    });\n\n    it ('read and verify spans and process sent', (done) => {\n        let spanOne = tracer.startSpan('operation-one');\n        spanOne.finish(); // finish to set span duration\n        spanOne = ThriftUtils.spanToThrift(spanOne);\n        let spanTwo = tracer.startSpan('operation-two');\n        spanTwo.finish(); // finish to set span duration\n        spanTwo = ThriftUtils.spanToThrift(spanTwo);\n\n        // make sure sender can fit both spans\n        let maxSpanBytes = sender._calcSpanSize(spanOne) + sender._calcSpanSize(spanTwo) + 30;\n        sender._maxSpanBytes = maxSpanBytes;\n\n        server.on('message', (msg, remote) => {\n            let thriftObj = thrift.Agent.emitBatch.argumentsMessageRW.readFrom(msg, 0);\n            let batch = thriftObj.value.body.batch;\n            assert.isOk(batch);\n            assert.equal(batch.spans.length, 2);\n\n            assertThriftSpanEqual(assert, spanOne, batch.spans[0]);\n            assertThriftSpanEqual(assert, spanTwo, batch.spans[1]);\n\n            assert.equal(batch.process.serviceName, 'test-service-name');\n            let actualTags = _.sortBy(batch.process.tags, (o) => {\n                return o.key;\n            });\n            assert.equal(actualTags.length, 3);\n            assert.equal(actualTags[0].key, 'ip');\n            assert.equal(actualTags[1].key, 'jaeger.hostname');\n            assert.equal(actualTags[2].key, 'jaeger.version');\n\n            sender.close();\n            done();\n        });\n\n        sender.append(spanOne);\n        sender.append(spanTwo);\n        sender.flush();\n    });\n\n    describe('span reference tests', () => {\n        let tracer = new Tracer(\n            'test-service-name',\n            new InMemoryReporter(),\n            new ConstSampler(true)\n        );\n        let parentContext = tracer.startSpan('just-used-for-context').context();\n        let childOfContext = tracer.startSpan('just-used-for-context').context();\n        let childOfRef = new opentracing.Reference(opentracing.REFERENCE_CHILD_OF, childOfContext);\n        let followsFromContext = tracer.startSpan('just-used-for-context').context();\n        let followsFromRef = new opentracing.Reference(opentracing.REFERENCE_FOLLOWS_FROM, followsFromContext);\n\n        let options = [\n            { 'childOf': null, 'references': [], 'expectedTraceId': null, 'expectedParentId': null },\n            { 'childOf': parentContext, 'references': [], 'expectedTraceId': parentContext.traceId, 'expectedParentId': parentContext.parentId },\n            { 'childOf': parentContext, 'references': [followsFromRef], 'expectedTraceId': parentContext.traceId, 'expectedParentId': parentContext.parentId },\n            { 'childOf': parentContext, 'references': [childOfRef, followsFromRef], 'expectedTraceId': parentContext.traceId, 'expectedParentId': parentContext.parentId},\n            { 'childOf': null, 'references': [childOfRef], 'expectedTraceId': childOfContext.traceId, 'expectedParentId': childOfContext.parentId },\n            { 'childOf': null, 'references': [followsFromRef], 'expectedTraceId': followsFromContext.traceId, 'expectedParentId': followsFromContext.parentId },\n            { 'childOf': null, 'references': [childOfRef, followsFromRef], 'expectedTraceId': childOfContext.traceId, 'expectedParentId': childOfContext.parentId }\n        ];\n\n        _.each(options, (o) => {\n            it ('span references serialize', (done) => {\n\n                let span = tracer.startSpan('bender', {\n                    childOf: o.childOf,\n                    references: o.references\n                });\n                span.finish();\n                span = ThriftUtils.spanToThrift(span);\n\n                server.on('message', function(msg, remote) {\n                    let thriftObj = thrift.Agent.emitBatch.argumentsMessageRW.readFrom(msg, 0);\n                    let batch = thriftObj.value.body.batch;\n                    let span = batch.spans[0];\n                    let ref = span.references[0];\n\n                    assert.isOk(batch);\n                    assertThriftSpanEqual(assert, span, batch.spans[0]);\n                    if (o.expectedTraceId) {\n                        assert.deepEqual(span.traceIdLow, o.expectedTraceId);\n                    }\n\n                    if (o.expectedParentId) {\n                        assert.deepEqual(span.parentId, o.expectedParentId);\n                    } else {\n                        assert.isNotOk(span.parentId);\n                    }\n\n                    sender.close();\n                    done();\n                });\n\n                sender.append(span);\n                sender.flush();\n            });\n        });\n    });\n\n    it ('flush spans when capacity is reached', () => {\n        let spanOne = tracer.startSpan('operation-one');\n        spanOne.finish(); // finish to set span duration\n        spanOne = ThriftUtils.spanToThrift(spanOne);\n        let spanSize = sender._calcSpanSize(spanOne);\n        sender._maxSpanBytes = spanSize * 2;\n\n        let responseOne = sender.append(spanOne);\n        let responseTwo = sender.append(spanOne);\n\n        assert.equal(responseOne.err, false);\n        assert.equal(responseOne.numSpans, 0);\n        assert.equal(responseTwo.err, false);\n        assert.equal(responseTwo.numSpans, 2);\n\n        assert.equal(sender._batch.spans.length, 0);\n        assert.equal(sender._totalSpanBytes, 0);\n    });\n\n    it ('flush spans when just over capacity', () => {\n        let spanOne = tracer.startSpan('operation-one');\n        spanOne.finish(); // finish to set span duration\n        spanOne = ThriftUtils.spanToThrift(spanOne);\n        let spanSize = sender._calcSpanSize(spanOne);\n        sender._maxSpanBytes = spanSize * 2;\n\n        let spanThatExceedsCapacity = tracer.startSpan('bigger-span');\n        spanThatExceedsCapacity.setTag('some-key', 'some-value');\n        spanThatExceedsCapacity.finish(); // finish to set span duration\n        spanThatExceedsCapacity = ThriftUtils.spanToThrift(spanThatExceedsCapacity);\n\n        let responseOne = sender.append(spanOne);\n        let responseTwo = sender.append(spanThatExceedsCapacity);\n        let expectedBufferSize = sender._calcSpanSize(spanThatExceedsCapacity);\n\n        assert.equal(sender._batch.spans.length, 1);\n        assert.equal(sender._totalSpanBytes, expectedBufferSize);\n        assert.equal(responseOne.err, false);\n        assert.equal(responseOne.numSpans, 0);\n        assert.equal(responseTwo.err, false);\n        assert.equal(responseTwo.numSpans, 1);\n    });\n\n    it('flush returns error, on failed buffer conversion', (done) => {\n        sender._logger = {\n            info: (msg) => {\n                console.log('sender info: ' + msg);\n            },\n            error: (msg) => {\n                expect(msg).to.have.string('error writing Thrift object:');\n                done();\n            }\n        };\n        let span = tracer.startSpan('leela');\n        span.finish(); // finish to set span duration\n        span = ThriftUtils.spanToThrift(span);\n        span.flags = 'string'; // malform the span to create a serialization error\n        sender.append(span);\n        let response = sender.flush();\n        assert.isOk(response.err);\n        assert.equal(response.numSpans, 1);\n    });\n\n    it ('return error response on span too large', () => {\n        let span = tracer.startSpan('op-name');\n        span.finish(); // otherwise duration will be undefined\n\n        sender._maxSpanBytes = 1;\n        let response = sender.append(ThriftUtils.spanToThrift(span));\n        assert.isOk(response.err);\n        assert.equal(response.numSpans, 1);\n        sender.flush();\n\n        // cleanup\n        sender.close();\n    });\n\n    it ('flush with no spans returns false for error, and 0', () => {\n        let response = sender.flush();\n\n        assert.equal(response.err, false);\n        assert.equal(response.numSpans, 0);\n    });\n\n    it ('flush gracefully handles errors emitted by socket.send', done => {\n        sender._host = 'foo.bar.xyz';\n        // In Node 0.10 and 0.12 the error is logged twice: (1) from inline callback, (2) from on('error') handler.\n        let node0_10_12 = semver.satisfies(process.version, '0.10.x || 0.12.x');\n        let expectedLogs = node0_10_12 ? 2 : 1;\n        sender._logger = {\n            info: (msg) => {\n                console.log('sender info: ' + msg);\n            },\n            error: (msg) => {\n                expect(msg).to.have.string('error sending spans over UDP: Error: getaddrinfo ENOTFOUND');\n                expectedLogs--;\n                if (expectedLogs == 0) {\n                    done();\n                }\n            }\n        };\n        let tracer = new Tracer(\n            'test-service-name',\n            new RemoteReporter(sender),\n            new ConstSampler(true)\n        );\n        tracer.startSpan('testSpan').finish();\n        sender.flush();\n    });\n});\n"]}