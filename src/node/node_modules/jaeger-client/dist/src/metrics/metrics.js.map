{"version":3,"sources":["../../../src/metrics/metrics.js"],"names":["Metrics","factory","_factory","tracesStartedSampled","createCounter","state","sampled","tracesStartedNotSampled","tracesJoinedSampled","tracesJoinedNotSampled","spansStarted","group","spansFinished","spansSampled","spansNotSampled","decodingErrors","reporterSuccess","reporterFailure","reporterDropped","reporterQueueLength","createGauge","samplerRetrieved","samplerUpdated","samplerQueryFailure","phase","samplerParsingFailure","baggageUpdateSuccess","result","baggageUpdateFailure","baggageTruncate"],"mappings":"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","file":"metrics.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nexport default class Metrics {\n    _factory: MetricsFactory;\n    tracesStartedSampled: Counter;\n    tracesStartedNotSampled: Counter;\n    tracesJoinedSampled: Counter;\n    tracesJoinedNotSampled: Counter;\n    spansStarted: Counter;\n    spansFinished: Counter;\n    spansSampled: Counter;\n    spansNotSampled: Counter;\n    decodingErrors: Counter;\n    reporterSuccess: Counter;\n    reporterFailure: Counter;\n    reporterDropped: Counter;\n    reporterQueueLength: Gauge;\n    samplerRetrieved: Counter;\n    samplerUpdated: Counter;\n    samplerQueryFailure: Counter;\n    samplerParsingFailure: Counter;\n    baggageUpdateSuccess: Counter;\n    baggageUpdateFailure: Counter;\n    baggageTruncate: Counter;\n\n    constructor(factory: MetricsFactory) {\n        this._factory = factory;\n\n        this.tracesStartedSampled = this._factory.createCounter('traces', {\n            state: 'started',\n            sampled: 'y'\n        });\n\n        this.tracesStartedNotSampled = this._factory.createCounter('traces', {\n            state: 'started',\n            sampled: 'n'\n        });\n\n        this.tracesJoinedSampled = this._factory.createCounter('traces', {\n            state: 'joined',\n            sampled: 'y'\n        });\n\n        this.tracesJoinedNotSampled = this._factory.createCounter('traces', {\n            state: 'joined',\n            sampled: 'n'\n        });\n\n        this.spansStarted = this._factory.createCounter('spans', {\n            group: 'lifecycle',\n            state: 'started'\n        });\n\n        this.spansFinished = this._factory.createCounter('spans', {\n            group: 'lifecycle',\n            state: 'finished'\n        });\n\n        this.spansSampled = this._factory.createCounter('spans', {\n            group: 'sampling',\n            sampled: 'y'\n        });\n\n        this.spansNotSampled = this._factory.createCounter('spans', {\n            group: 'sampling',\n            sampled: 'n'\n        });\n\n        this.decodingErrors = this._factory.createCounter('decoding-errors');\n\n        this.reporterSuccess = this._factory.createCounter('reporter-spans', {\n            state: 'success'\n        });\n\n        this.reporterFailure = this._factory.createCounter('reporter-spans', {\n            state: 'failure'\n        });\n\n        this.reporterDropped = this._factory.createCounter('reporter-spans', {\n            state: 'dropped'\n        });\n\n        this.reporterQueueLength = this._factory.createGauge('reporter-queue');\n\n        this.samplerRetrieved = this._factory.createCounter('sampler', {\n            state: 'retrieved'\n        });\n\n        this.samplerUpdated = this._factory.createCounter('sampler', {\n            state: 'updated'\n        });\n\n        this.samplerQueryFailure = this._factory.createCounter('sampler', {\n            state: 'failure',\n            phase: 'query'\n        });\n\n        this.samplerParsingFailure = this._factory.createCounter('sampler', {\n            state: 'failure',\n            phase: 'parsing'\n        });\n\n        this.baggageUpdateSuccess = this._factory.createCounter('baggage-update', {\n            result: 'ok',\n        });\n\n        this.baggageUpdateFailure = this._factory.createCounter('baggage-update', {\n            result: 'err',\n        });\n\n        this.baggageTruncate = this._factory.createCounter('baggage-trucate');\n    }\n}\n"]}