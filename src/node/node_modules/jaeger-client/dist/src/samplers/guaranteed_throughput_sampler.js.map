{"version":3,"sources":["../../../src/samplers/guaranteed_throughput_sampler.js"],"names":["constants","GuaranteedThroughputSampler","lowerBound","samplingRate","_probabilisticSampler","_lowerBoundSampler","_tagsPlaceholder","name","maxTracesPerSecond","operation","tags","isSampled","decision","SAMPLER_TYPE_TAG_KEY","SAMPLER_TYPE_LOWER_BOUND","SAMPLER_PARAM_TAG_KEY","other","equal","callback","close","updated","update"],"mappings":";;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;IAAYA,S;;AACZ;;;;AACA;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;IACqBC,2B;AAKjB,yCAAYC,UAAZ,EAAgCC,YAAhC,EAAsD;AAAA;;AAClD,aAAKC,qBAAL,GAA8B,oCAAyBD,YAAzB,CAA9B;AACA,aAAKE,kBAAL,GAA0B,mCAAwBH,UAAxB,CAA1B;AACA;AACA;AACA,aAAKI,gBAAL,GAAwB,EAAxB;AACH;;;;+BAEc;AACX,mBAAO,6BAAP;AACH;;;mCAEkB;AACf,mBAAU,KAAKC,IAAL,EAAV,sBAAsC,KAAKH,qBAAL,CAA2BD,YAAjE,qBAA6F,KAAKE,kBAAL,CAAwBG,kBAArH;AACH;;;kCAESC,S,EAAmBC,I,EAAoB;AAC7C,gBAAI,KAAKN,qBAAL,CAA2BO,SAA3B,CAAqCF,SAArC,EAAgDC,IAAhD,CAAJ,EAA2D;AACvD;AACA,qBAAKL,kBAAL,CAAwBM,SAAxB,CAAkCF,SAAlC,EAA6C,KAAKH,gBAAlD;AACA,uBAAO,IAAP;AACH;AACD,gBAAIM,WAAW,KAAKP,kBAAL,CAAwBM,SAAxB,CAAkCF,SAAlC,EAA6C,KAAKH,gBAAlD,CAAf;AACA,gBAAIM,QAAJ,EAAc;AACVF,qBAAKV,UAAUa,oBAAf,IAAuCb,UAAUc,wBAAjD;AACAJ,qBAAKV,UAAUe,qBAAf,IAAwC,KAAKX,qBAAL,CAA2BD,YAAnE;AACH;AACD,mBAAOS,QAAP;AACH;;;8BAEKI,K,EAAyB;AAC3B,gBAAI,EAAEA,iBAAiBf,2BAAnB,CAAJ,EAAqD;AACjD,uBAAO,KAAP;AACH;AACD,mBAAO,KAAKG,qBAAL,CAA2Ba,KAA3B,CAAiCD,MAAMZ,qBAAvC,KACH,KAAKC,kBAAL,CAAwBY,KAAxB,CAA8BD,MAAMX,kBAApC,CADJ;AAEH;;;8BAEKa,Q,EAA2B;AAC7B;AACA;AACA;AACA,iBAAKd,qBAAL,CAA2Be,KAA3B,CAAiC,YAAM,CAAE,CAAzC;AACA,iBAAKd,kBAAL,CAAwBc,KAAxB,CAA8B,YAAM,CAAE,CAAtC;AACA,gBAAID,QAAJ,EAAc;AACVA;AACH;AACJ;;;+BAEMhB,U,EAAoBC,Y,EAA+B;AACtD,gBAAIiB,UAAU,KAAd;AACA,gBAAI,KAAKhB,qBAAL,CAA2BD,YAA3B,IAA2CA,YAA/C,EAA6D;AACzD,qBAAKC,qBAAL,GAA6B,oCAAyBD,YAAzB,CAA7B;AACAiB,0BAAU,IAAV;AACH;AACD,gBAAI,KAAKf,kBAAL,CAAwBG,kBAAxB,IAA8CN,UAAlD,EAA8D;AAC1DkB,0BAAU,KAAKf,kBAAL,CAAwBgB,MAAxB,CAA+BnB,UAA/B,CAAV;AACH;AACD,mBAAOkB,OAAP;AACH;;;;;;kBAhEgBnB,2B","file":"guaranteed_throughput_sampler.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport * as constants from '../constants.js';\nimport ProbabilisticSampler from './probabilistic_sampler.js';\nimport RateLimitingSampler from './ratelimiting_sampler.js';\n\n// GuaranteedThroughputProbabilisticSampler is a sampler that leverages both probabilisticSampler and\n// rateLimitingSampler. The rateLimitingSampler is used as a guaranteed lower bound sampler such that\n// every operation is sampled at least once in a time interval defined by the lowerBound. ie a lowerBound\n// of 1.0 / (60 * 10) will sample an operation at least once every 10 minutes.\n//\n// The probabilisticSampler is given higher priority when tags are emitted, ie. if IsSampled() for both\n// samplers return true, the tags for probabilisticSampler will be used.\nexport default class GuaranteedThroughputSampler {\n    _probabilisticSampler: ProbabilisticSampler;\n    _lowerBoundSampler:    RateLimitingSampler;\n    _tagsPlaceholder:      any;\n\n    constructor(lowerBound: number, samplingRate: number) {\n        this._probabilisticSampler =  new ProbabilisticSampler(samplingRate);\n        this._lowerBoundSampler = new RateLimitingSampler(lowerBound);\n        // we never let the lowerBoundSampler return its real tags, so avoid allocations\n        // by reusing the same placeholder object\n        this._tagsPlaceholder = {};\n    }\n\n    name(): string {\n        return 'GuaranteedThroughputSampler';\n    }\n\n    toString(): string {\n        return `${this.name()}(samplingRate=${this._probabilisticSampler.samplingRate}, lowerBound=${this._lowerBoundSampler.maxTracesPerSecond})`;\n    }\n\n    isSampled(operation: string, tags: any): boolean {\n        if (this._probabilisticSampler.isSampled(operation, tags)) {\n            // make rate limiting sampler update its budget\n            this._lowerBoundSampler.isSampled(operation, this._tagsPlaceholder);\n            return true;\n        }\n        let decision = this._lowerBoundSampler.isSampled(operation, this._tagsPlaceholder);\n        if (decision) {\n            tags[constants.SAMPLER_TYPE_TAG_KEY] = constants.SAMPLER_TYPE_LOWER_BOUND;\n            tags[constants.SAMPLER_PARAM_TAG_KEY] = this._probabilisticSampler.samplingRate;\n        }\n        return decision;\n    }\n\n    equal(other: Sampler): boolean {\n        if (!(other instanceof GuaranteedThroughputSampler)) {\n            return false;\n        }\n        return this._probabilisticSampler.equal(other._probabilisticSampler) &&\n            this._lowerBoundSampler.equal(other._lowerBoundSampler);\n    }\n\n    close(callback: ?Function): void {\n        // neither probabilistic nor rate limiting samplers allocate resources,\n        // so their close methods are effectively no-op. We do not need to\n        // pass the callback to them (if we did we'd need to wrap it).\n        this._probabilisticSampler.close(() => {});\n        this._lowerBoundSampler.close(() => {});\n        if (callback) {\n            callback();\n        }\n    }\n\n    update(lowerBound: number, samplingRate: number): boolean {\n        let updated = false;\n        if (this._probabilisticSampler.samplingRate != samplingRate) {\n            this._probabilisticSampler = new ProbabilisticSampler(samplingRate);\n            updated = true;\n        }\n        if (this._lowerBoundSampler.maxTracesPerSecond != lowerBound) {\n            updated = this._lowerBoundSampler.update(lowerBound);\n        }\n        return updated;\n    }\n}\n"]}