{"version":3,"sources":["../../../crossdock/test/http_server.js"],"names":["process","env","NODE_ENV","describe","server","before","it","done","sampled","baggage","host","startRequest","setTimeout","headers","post","JSON","stringify","err","response","console","log","isNotOk","traceResponse","parse","body","isOk","span","traceId","equal","downstream","notImplementedError","timeout","joinRequest"],"mappings":"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","file":"http_server.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport {assert} from 'chai';\nimport HttpServer from '../src/http_server.js';\nimport request from 'request';\n\nprocess.env.NODE_ENV = 'test';\n\ndescribe('crossdock http server should', () => {\n    let server;\n    before(() => {\n        server = new HttpServer();\n    });\n\n    it('return proper trace response for start_request, and join_trace combined', (done) => {\n        let sampled = true;\n        let baggage = \"7e859ffef96e5da6\";\n        let host = \"127.0.0.1\";\n        let startRequest = {\n            \"serverRole\": \"S1\",\n            \"sampled\": sampled,\n            \"baggage\": baggage,\n            \"downstream\": {\n                \"serviceName\": \"node\",\n                \"serverRole\": \"S2\",\n                \"host\": host,\n                \"port\": \"8081\",\n                \"transport\": \"HTTP\",\n                \"downstream\": {\n                    \"serviceName\": \"node\",\n                    \"serverRole\": \"S3\",\n                    \"host\": host,\n                    \"port\": \"8081\",\n                    \"transport\": \"HTTP\"\n                }\n            }\n        };\n\n        setTimeout(() => {\n            let headers = { 'Content-Type': 'application/json' };\n            request.post({\n                'url': 'http://127.0.0.1:8081/start_trace',\n                'forever': true,\n                'headers': headers,\n                'body': JSON.stringify(startRequest)\n            }, (err, response) => {\n                if (err) {\n                    console.log('err', err);\n                }\n\n                // top level span\n                assert.isNotOk(err);\n                let traceResponse = JSON.parse(response.body);\n                assert.isOk(traceResponse.span.traceId);\n                assert.equal(traceResponse.span.sampled, true);\n                assert.equal(traceResponse.span.baggage, '7e859ffef96e5da6');\n\n                // downstream level 1\n                assert.isOk(traceResponse.downstream);\n                assert.equal(traceResponse.notImplementedError, '');\n                assert.equal(traceResponse.span.traceId, traceResponse.downstream.span.traceId);\n                assert.equal(traceResponse.downstream.span.sampled, true);\n                assert.equal(traceResponse.downstream.span.baggage, '7e859ffef96e5da6');\n                assert.equal(traceResponse.downstream.notImplementedError, '');\n\n                // downstream level 2\n                assert.isOk(traceResponse.downstream.downstream);\n                assert.equal(traceResponse.downstream.span.traceId, traceResponse.downstream.downstream.span.traceId);\n                assert.equal(traceResponse.downstream.downstream.notImplementedError, '');\n                assert.isOk(traceResponse.downstream.downstream.span.sampled, true);\n                assert.isOk(traceResponse.downstream.downstream.span.baggage, '7e859ffef96e5da6');\n                done();\n            });\n        }, 3000);\n    }).timeout(5000);\n\n    it('return proper trace response for start_request', (done) => {\n        let sampled = true;\n        let baggage = \"7e859ffef96e5da6\";\n        let host = \"127.0.0.1\";\n        let startRequest = {\n            \"serverRole\": \"S1\",\n            \"sampled\": sampled,\n            \"baggage\": baggage\n        };\n\n        let headers = { 'Content-Type': 'application/json' };\n        request.post({\n            'url': 'http://127.0.0.1:8081/start_trace',\n            'forever': true,\n            'headers': headers,\n            'body': JSON.stringify(startRequest)\n        }, (err, response) => {\n            if (err) {\n                console.log('err', err);\n            }\n            assert.isNotOk(err);\n            let traceResponse = JSON.parse(response.body);\n            assert.equal(traceResponse.span.sampled, true);\n            assert.equal(traceResponse.span.baggage, '7e859ffef96e5da6');\n            assert.equal(traceResponse.notImplementedError, '');\n            done();\n        });\n    });\n\n    it('return proper trace response for join_request', (done) => {\n        let sampled = true;\n        let baggage = \"7e859ffef96e5da6\";\n        let host = \"127.0.0.1\";\n        let joinRequest = {\n            \"serverRole\": \"S1\",\n        };\n\n        let headers = { 'Content-Type': 'application/json' };\n        request.post({\n            'url': 'http://127.0.0.1:8081/join_trace',\n            'forever': true,\n            'headers': headers,\n            'body': JSON.stringify(joinRequest)\n        }, (err, response) => {\n            if (err) {\n                console.log('err', err);\n            }\n\n            assert.isNotOk(err);\n            let traceResponse = JSON.parse(response.body);\n            assert.equal(traceResponse.span.sampled, false);\n            assert.equal(traceResponse.notImplementedError, '');\n            done();\n        });\n    });\n});\n"]}