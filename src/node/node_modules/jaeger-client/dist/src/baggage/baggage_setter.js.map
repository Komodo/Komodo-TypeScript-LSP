{"version":3,"sources":["../../../src/baggage/baggage_setter.js"],"names":["BaggageSetter","restrictionManager","metrics","_restrictionManager","_metrics","span","key","baggageValue","value","truncated","prevItem","restriction","getRestriction","serviceName","keyAllowed","_logFields","baggageUpdateFailure","increment","context","length","maxValueLength","substring","baggageTruncate","getBaggageItem","baggageUpdateSuccess","withBaggageItem","valid","isSampled","fields","event","override","invalid","log"],"mappings":";;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AACA;;;;AACA;;;;;;;;AAEA;;;;IAIqBA,a;AAIjB,2BAAYC,kBAAZ,EAA2DC,OAA3D,EAA6E;AAAA;;AACzE,aAAKC,mBAAL,GAA2BF,kBAA3B;AACA,aAAKG,QAAL,GAAgBF,OAAhB;AACH;;AAED;;;;;;;;;;;;;mCASWG,I,EAAYC,G,EAAaC,Y,EAAmC;AACnE,gBAAIC,QAAQD,YAAZ;AACA,gBAAIE,YAAY,KAAhB;AACA,gBAAIC,WAAW,EAAf;AACA,gBAAIC,cAAc,KAAKR,mBAAL,CAAyBS,cAAzB,CAAwCP,KAAKQ,WAA7C,EAA0DP,GAA1D,CAAlB;AACA,gBAAI,CAACK,YAAYG,UAAjB,EAA6B;AACzB,qBAAKC,UAAL,CAAgBV,IAAhB,EAAsBC,GAAtB,EAA2BE,KAA3B,EAAkCE,QAAlC,EAA4CD,SAA5C,EAAuDE,YAAYG,UAAnE;AACA,qBAAKV,QAAL,CAAcY,oBAAd,CAAmCC,SAAnC,CAA6C,CAA7C;AACA,uBAAOZ,KAAKa,OAAL,EAAP;AACH;AACD,gBAAIV,MAAMW,MAAN,GAAeR,YAAYS,cAA/B,EAA+C;AAC3CX,4BAAY,IAAZ;AACAD,wBAAQA,MAAMa,SAAN,CAAgB,CAAhB,EAAmBV,YAAYS,cAA/B,CAAR;AACA,qBAAKhB,QAAL,CAAckB,eAAd,CAA8BL,SAA9B,CAAwC,CAAxC;AACH;AACDP,uBAAWL,KAAKkB,cAAL,CAAoBjB,GAApB,CAAX;AACA,iBAAKS,UAAL,CAAgBV,IAAhB,EAAsBC,GAAtB,EAA2BE,KAA3B,EAAkCE,QAAlC,EAA4CD,SAA5C,EAAuDE,YAAYG,UAAnE;AACA,iBAAKV,QAAL,CAAcoB,oBAAd,CAAmCP,SAAnC,CAA6C,CAA7C;AACA,mBAAOZ,KAAKa,OAAL,GAAeO,eAAf,CAA+BnB,GAA/B,EAAoCE,KAApC,CAAP;AACH;;;mCAEUH,I,EAAYC,G,EAAaE,K,EAAeE,Q,EAAkBD,S,EAAoBiB,K,EAAgB;AACrG,gBAAI,CAACrB,KAAKa,OAAL,GAAeS,SAAf,EAAL,EAAiC;AAC7B;AACH;AACD,gBAAIC,SAAoC;AACpCC,uBAAO,SAD6B;AAEpCvB,qBAAKA,GAF+B;AAGpCE,uBAAOA;AAH6B,aAAxC;AAKA,gBAAIE,QAAJ,EAAc;AACVkB,uBAAOE,QAAP,GAAkB,MAAlB;AACH;AACD,gBAAIrB,SAAJ,EAAe;AACXmB,uBAAOnB,SAAP,GAAmB,MAAnB;AACH;AACD,gBAAI,CAACiB,KAAL,EAAY;AACRE,uBAAOG,OAAP,GAAiB,MAAjB;AACH;AACD1B,iBAAK2B,GAAL,CAASJ,MAAT;AACH;;;;;;kBA1DgB5B,a","file":"baggage_setter.js","sourcesContent":["// @flow\n// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport Span from '../span.js';\nimport SpanContext from '../span_context.js';\nimport Metrics from '../metrics/metrics.js'\n\n/**\n * BaggageSetter is a class that sets a baggage key:value and the associated\n * logs on a Span.\n */\nexport default class BaggageSetter {\n    _restrictionManager: BaggageRestrictionManager;\n    _metrics: Metrics;\n\n    constructor(restrictionManager: BaggageRestrictionManager, metrics: Metrics) {\n        this._restrictionManager = restrictionManager;\n        this._metrics = metrics;\n    }\n\n    /**\n     * Sets the baggage key:value on the span and the corresponding logs.\n     * A SpanContext is returned with the new baggage key:value set.\n     *\n     * @param {Span} span - The span to set the baggage on.\n     * @param {string} key - The baggage key to set.\n     * @param {string} baggageValue - The baggage value to set.\n     * @return {SpanContext} - The SpanContext with the baggage set if applicable.\n     */\n    setBaggage(span: Span, key: string, baggageValue: string): SpanContext {\n        let value = baggageValue;\n        let truncated = false;\n        let prevItem = '';\n        let restriction = this._restrictionManager.getRestriction(span.serviceName, key);\n        if (!restriction.keyAllowed) {\n            this._logFields(span, key, value, prevItem, truncated, restriction.keyAllowed);\n            this._metrics.baggageUpdateFailure.increment(1);\n            return span.context();\n        }\n        if (value.length > restriction.maxValueLength) {\n            truncated = true;\n            value = value.substring(0, restriction.maxValueLength);\n            this._metrics.baggageTruncate.increment(1);\n        }\n        prevItem = span.getBaggageItem(key);\n        this._logFields(span, key, value, prevItem, truncated, restriction.keyAllowed);\n        this._metrics.baggageUpdateSuccess.increment(1);\n        return span.context().withBaggageItem(key, value);\n    }\n\n    _logFields(span: Span, key: string, value: string, prevItem: string, truncated: boolean, valid: boolean) {\n        if (!span.context().isSampled()) {\n            return\n        }\n        let fields: { [key: string]: string } = {\n            event: 'baggage',\n            key: key,\n            value: value,\n        };\n        if (prevItem) {\n            fields.override = 'true';\n        }\n        if (truncated) {\n            fields.truncated = 'true';\n        }\n        if (!valid) {\n            fields.invalid = 'true';\n        }\n        span.log(fields);\n    }\n}\n"]}