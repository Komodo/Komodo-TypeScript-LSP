{"version":3,"sources":["../../../crossdock/test/tchannel_server.js"],"names":["constants","crossdock_constants","process","env","NODE_ENV","describe","ip","server","tracer","bridge","crossdockSpecPath","join","__dirname","before","myIp","it","done","span","startSpan","setBaggageItem","BAGGAGE_KEY","clientChannel","requestChannel","makeSubChannel","serviceName","peers","thriftChannel","channel","entryPoint","tracedChannel","joinRequest","context","setSpan","request","timeout","headers","cn","send","err","res","isNotOk","traceResponse","body","equal","traceId","traceIdStr","downstream","sampled","baggage","getBaggageItem"],"mappings":"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","file":"tchannel_server.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport {assert} from 'chai';\nimport * as constants from '../../src/constants';\nimport * as crossdock_constants from '../src/constants';\nimport ConstSampler from '../../src/samplers/const_sampler.js';\nimport DefaultContext from '../../src/default_context';\nimport opentracing from 'opentracing';\nimport InMemoryReporter from '../../src/reporters/in_memory_reporter.js';\nimport TChannelBridge from '../../src/tchannel_bridge';\nimport TChannelServer from '../src/tchannel_server.js';\nimport TChannelAsThrift from 'tchannel/as/thrift';\nimport TChannel from 'tchannel';\nimport Tracer from '../../src/tracer.js';\nimport fs from 'fs';\nimport path from 'path';\nimport Utils from '../../src/util.js';\n\nprocess.env.NODE_ENV = 'test';\n\n// WARNING THESE TESTS DO NOT WORK WHEN THE VPN IS RUNNING.\n\ndescribe('crossdock tchannel server should', () => {\n    let ip;\n    let server;\n    let tracer;\n    let bridge;\n    let crossdockSpecPath = path.join(__dirname, '..', '..', 'src', 'jaeger-idl', 'thrift', 'crossdock', 'tracetest.thrift');\n\n    before(() => {\n        tracer = new Tracer('node', new InMemoryReporter(), new ConstSampler(false));\n        bridge = new TChannelBridge(tracer);\n        server = new TChannelServer(crossdockSpecPath);\n        ip = Utils.myIp();\n    });\n\n\n    describe('joinTrace with different options', () => {\n\n        it ('propagate span state on tchannel joinTrace', (done) => {\n            let span = tracer.startSpan('test-span');\n            span.setBaggageItem(crossdock_constants.BAGGAGE_KEY, 'fry');\n\n            let clientChannel = new TChannel();\n\n            let requestChannel = clientChannel.makeSubChannel({\n                serviceName: 'node',\n                peers: [Utils.myIp() + ':8082']\n            });\n            let thriftChannel = TChannelAsThrift({\n                channel: requestChannel,\n                entryPoint: crossdockSpecPath\n            });\n            let tracedChannel = bridge.tracedChannel(thriftChannel);\n\n            let joinRequest = {\n                'serverRole': 'S1',\n                'downstream': {\n                    'serviceName': 'node',\n                    'serverRole': 'S2',\n                    'host': Utils.myIp(),\n                    'port': '8082',\n                    'transport': 'TCHANNEL'\n                }\n            };\n\n            let context = new DefaultContext();\n            context.setSpan(span);\n            tracedChannel.request({\n                timeout: 100000,\n                context: context,\n                serviceName: 'node',\n                headers: {\n                    cn: 'node-tchannel'\n                },\n            }).send('TracedService::joinTrace',\n                null,\n                {'request': joinRequest},\n                (err, res) => {\n                    if (err) {\n                        assert.isNotOk(err);\n                    } else {\n                        let traceResponse = res.body;\n                        assert.equal(traceResponse.span.traceId, span.context().traceIdStr);\n                        assert.equal(traceResponse.span.traceId, traceResponse.downstream.span.traceId);\n                        assert.equal(traceResponse.span.sampled, false);\n                        assert.equal(traceResponse.span.baggage, span.getBaggageItem(crossdock_constants.BAGGAGE_KEY));\n                    }\n                    done();\n                }\n            );\n        }).timeout(100000);\n    });\n});\n"]}