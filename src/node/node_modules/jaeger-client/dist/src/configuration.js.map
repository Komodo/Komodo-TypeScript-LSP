{"version":3,"sources":["../../src/configuration.js"],"names":["constants","jaegerSchema","Configuration","config","type","sampler","param","host","port","refreshIntervalMs","Error","SAMPLER_TYPE_PROBABILISTIC","SAMPLER_TYPE_RATE_LIMITING","SAMPLER_TYPE_CONST","SAMPLER_TYPE_REMOTE","serviceName","refreshInterval","options","reporterConfig","reporters","senderConfig","logger","reporter","logSpans","push","flushIntervalMs","agentHost","agentPort","sender","remoteReporter","length","metrics","disable","Tracer","_getSampler","_getReporter","info","name","tags"],"mappings":"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","file":"configuration.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport ConstSampler from './samplers/const_sampler';\nimport ProbabilisticSampler from './samplers/probabilistic_sampler';\nimport RateLimitingSampler from './samplers/ratelimiting_sampler';\nimport RemoteReporter from './reporters/remote_reporter';\nimport CompositeReporter from './reporters/composite_reporter';\nimport LoggingReporter from './reporters/logging_reporter';\nimport RemoteSampler from './samplers/remote_sampler';\nimport Metrics from './metrics/metrics';\nimport Tracer from './tracer';\nimport UDPSender from './reporters/udp_sender';\nimport opentracing from 'opentracing';\nimport * as constants from './constants.js';\n\nlet jaegerSchema = {\n    'id': '/jaeger',\n    'type': 'object',\n    'properties': {\n        'serviceName': {'type': 'string'},\n        'disable': {'type': 'boolean'},\n        'sampler': {\n            'properties': {\n                'type': {'type': 'string' },\n                'param': {'type': 'number' },\n                'host': {'type': 'string' },\n                'port': {'type': 'number' },\n                'refreshIntervalMs': {'type': 'number' }\n            },\n            'required': ['type', 'param'],\n            'additionalProperties': false\n        },\n        'reporter': {\n            'properties': {\n                'logSpans': {'type': 'boolean'},\n                'agentHost': {'type': 'string'},\n                'agentPort': {'type': 'number'},\n                'flushIntervalMs': {'type': 'number'}\n            },\n            'additionalProperties': false\n        }\n    }\n};\n\nexport default class Configuration {\n\n    static _getSampler(config) {\n        let type = config.sampler.type;\n        let param = config.sampler.param;\n        let host = config.sampler.host;\n        let port = config.sampler.port;\n        let refreshIntervalMs = config.sampler.refreshIntervalMs;\n\n        if (typeof(param) !== 'number') {\n            throw new Error(`Expecting sampler.param to be a number. Received ${param}`);\n        }\n\n        let sampler;\n        if (type === constants.SAMPLER_TYPE_PROBABILISTIC) {\n            sampler = new ProbabilisticSampler(param);\n        }\n\n        if (type === constants.SAMPLER_TYPE_RATE_LIMITING) {\n            sampler = new RateLimitingSampler(param);\n        }\n\n        if (type === constants.SAMPLER_TYPE_CONST) {\n            sampler = new ConstSampler(param === 1);\n        }\n\n        if (type === constants.SAMPLER_TYPE_REMOTE) {\n            sampler = new RemoteSampler(config.serviceName, {\n                sampler: new ProbabilisticSampler(param),\n                host: host,\n                port: port,\n                refreshInterval: refreshIntervalMs\n            });\n        }\n\n        return sampler;\n    }\n\n    static _getReporter(config, options) {\n        let reporterConfig = {};\n        let reporters = [];\n        let senderConfig = {\n            'logger': config.logger\n        };\n        if (config.reporter) {\n            if (config.reporter.logSpans) {\n                reporters.push(new LoggingReporter(options.logger));\n            }\n\n            if (config.reporter.flushIntervalMs) {\n                reporterConfig['bufferFlushInterval'] = config.reporter.flushIntervalMs;\n            }\n\n            if (config.reporter.agentHost) {\n                senderConfig['host'] = config.reporter.agentHost;\n            }\n\n            if (config.reporter.agentPort) {\n                senderConfig['port'] = config.reporter.agentPort;\n            }\n        }\n        let sender = new UDPSender(senderConfig);\n        let remoteReporter = new RemoteReporter(sender, reporterConfig);\n        if (reporters.length == 0) {\n            return remoteReporter;\n        }\n        reporters.push(remoteReporter);\n        return new CompositeReporter(reporters);\n    }\n\n    /**\n     * Initialize and return a new instance of Jaeger Tracer.\n     * \n     * The config dictionary is not validated for adherence to the schema above.\n     * Such validation can be performed like this:\n     * \n     *     import {Validator} from 'jsonschema';\n     * \n     *     let v = new Validator();\n     *     v.validate(config, jaegerSchema, {\n     *       throwError: true\n     *     });\n     * \n     * @param {Object} config - configuration matching the jaegerSchema definition.\n     * @param {Object} options - options\n     * @param {Object} [options.reporter] - if provided, this reporter will be used.\n     *        Otherwise a new reporter will be created according to the description\n     *        in the config.\n     * @param {Object} [options.metrics] - a metrics factory (see ./_flow/metrics.js)\n     * @param {Object} [options.logger] - a logger (see ./_flow/logger.js)\n     * @param {Object} [options.tags] - set of key-value pairs which will be set\n     *        as process-level tags on the Tracer itself.\n     */\n    static initTracer(config, options = {}) {\n        let reporter;\n        let sampler;\n        if (options.metrics) {\n            options.metrics = new Metrics(options.metrics);\n        }\n        if (config.disable) {\n            return new opentracing.Tracer();\n        } else {\n            if (config.sampler) {\n                sampler = Configuration._getSampler(config);\n            } else {\n                sampler = new RemoteSampler(config.serviceName, options);\n            }\n\n            if (!options.reporter) {\n                reporter = Configuration._getReporter(config, options);\n            } else {\n                reporter = options.reporter;\n            }\n        }\n\n        if (options.logger) {\n            options.logger.info(\n                `Initializing Jaeger Tracer with ${reporter.name()} and ${sampler.name()}`\n            );\n        }\n\n        return new Tracer(\n            config.serviceName,\n            reporter,\n            sampler,\n            {\n                metrics: options.metrics,\n                logger: options.logger,\n                tags: options.tags\n            }\n        );\n    }\n}\n"]}