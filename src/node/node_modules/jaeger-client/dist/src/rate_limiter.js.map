{"version":3,"sources":["../../src/rate_limiter.js"],"names":["RateLimiter","creditsPerSecond","maxBalance","initBalance","_creditsPerSecond","_balance","Math","random","_maxBalance","_lastTick","Date","getTime","itemCost","currentTime","elapsedTime"],"mappings":";;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEqBA,W;AAMjB,yBAAYC,gBAAZ,EAAsCC,UAAtC,EAA0DC,WAA1D,EAAgF;AAAA;;AAC5E,aAAKC,iBAAL,GAAyBH,gBAAzB;AACA,aAAKI,QAAL,GAAgBF,eAAeG,KAAKC,MAAL,KAAgBL,UAA/C;AACA,aAAKM,WAAL,GAAmBN,UAAnB;AACA,aAAKO,SAAL,GAAiB,IAAIC,IAAJ,GAAWC,OAAX,EAAjB;AACH;;;;+BAEMV,gB,EAA0BC,U,EAAoB;AACjD,iBAAKE,iBAAL,GAAyBH,gBAAzB;AACA,iBAAKO,WAAL,GAAmBN,UAAnB;AACA,gBAAI,KAAKG,QAAL,GAAgBH,UAApB,EAAgC;AAC5B,qBAAKG,QAAL,GAAgBH,UAAhB;AACH;AACJ;;;oCAEWU,Q,EAA2B;AACnC,gBAAIC,cAAsB,IAAIH,IAAJ,GAAWC,OAAX,EAA1B;AACA,gBAAIG,cAAsB,CAACD,cAAc,KAAKJ,SAApB,IAAiC,IAA3D;AACA,iBAAKA,SAAL,GAAiBI,WAAjB;;AAEA,iBAAKR,QAAL,IAAiBS,cAAc,KAAKV,iBAApC;AACA,gBAAI,KAAKC,QAAL,GAAgB,KAAKG,WAAzB,EAAsC;AAClC,qBAAKH,QAAL,GAAgB,KAAKG,WAArB;AACH;AACD,gBAAI,KAAKH,QAAL,IAAiBO,QAArB,EAA+B;AAC3B,qBAAKP,QAAL,IAAiBO,QAAjB;AACA,uBAAO,IAAP;AACH;AACD,mBAAO,KAAP;AACH;;;;;;kBAnCgBZ,W","file":"rate_limiter.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nexport default class RateLimiter {\n    _creditsPerSecond: number;\n    _balance: number;\n    _maxBalance: number;\n    _lastTick: number;\n\n    constructor(creditsPerSecond: number, maxBalance: number, initBalance: ?number) {\n        this._creditsPerSecond = creditsPerSecond;\n        this._balance = initBalance || Math.random() * maxBalance;\n        this._maxBalance = maxBalance;\n        this._lastTick = new Date().getTime();\n    }\n\n    update(creditsPerSecond: number, maxBalance: number) {\n        this._creditsPerSecond = creditsPerSecond;\n        this._maxBalance = maxBalance;\n        if (this._balance > maxBalance) {\n            this._balance = maxBalance;\n        }\n    }\n\n    checkCredit(itemCost: number): boolean {\n        let currentTime: number = new Date().getTime();\n        let elapsedTime: number = (currentTime - this._lastTick) / 1000;\n        this._lastTick = currentTime;\n\n        this._balance += elapsedTime * this._creditsPerSecond;\n        if (this._balance > this._maxBalance) {\n            this._balance = this._maxBalance;\n        }\n        if (this._balance >= itemCost) {\n            this._balance -= itemCost;\n            return true;\n        }\n        return false;\n    }\n}\n"]}