{"version":3,"sources":["../../../test/samplers/per_operation_sampler.js"],"names":["describe","strategies","defaultLowerBoundTracesPerSecond","defaultSamplingProbability","perOperationStrategies","operation","probabilisticSampling","samplingRate","it","sampler","equal","name","callback","spy","close","calledOnce","_maxOperations","_defaultLowerBound","isObject","_defaultSampler","Object","keys","_samplersByOperation","length","s1","_probabilisticSampler","exp","mock","expects","exactly","withExactArgs","isSampled","verify","updated","isUpdated","update","isTrue","s2","s0","isFalse","strictEqual"],"mappings":"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","file":"per_operation_sampler.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport {assert} from 'chai';\nimport sinon from 'sinon';\nimport PerOperationSampler from '../../src/samplers/per_operation_sampler';\n\ndescribe('PerOperationSampler', () => {\n\n    let strategies: PerOperationSamplingStrategies = {\n        defaultLowerBoundTracesPerSecond: 1.1,\n        defaultSamplingProbability: 0.123,\n        perOperationStrategies: [\n            {\n                operation: 'op1',\n                probabilisticSampling: { samplingRate: 0.5 }\n            }\n        ]\n    };\n\n    it('should have a name and be closable', () => {\n        let sampler = new PerOperationSampler(strategies, 0);\n        assert.equal(sampler.name(), 'PerOperationSampler');\n\n        let callback = sinon.spy();\n        sampler.close(callback);\n        assert(callback.calledOnce);\n\n        sampler = new PerOperationSampler(strategies, 0);\n        sampler.close(); // close without callback\n\n        sampler.equal(sampler); // for coverate only\n    });\n    \n    it('should parse initial strategies', () => {\n        let sampler = new PerOperationSampler(strategies, 2);\n        assert.equal(sampler._maxOperations, 2);\n        assert.equal(sampler._defaultLowerBound, 1.1);\n        assert.isObject(sampler._defaultSampler);\n        assert.equal(sampler._defaultSampler.samplingRate, 0.123);\n        assert.equal(Object.keys(sampler._samplersByOperation).length, 1);\n        let s1 = sampler._samplersByOperation['op1'];\n        assert.isObject(s1);\n        assert.isObject(s1._probabilisticSampler);\n        assert.equal(s1._probabilisticSampler.samplingRate, 0.5);\n    });\n\n    it('should use per-op sampler', () => {\n        let sampler = new PerOperationSampler(strategies, 2);\n        let s1 = sampler._samplersByOperation['op1'];\n        let exp = sinon.mock(s1).expects('isSampled');\n        exp.exactly(2);\n        exp.withExactArgs('op1', {});\n        sampler.isSampled('op1', {});\n        sampler.isSampled('op1', {});\n        exp.verify();\n        assert.equal(Object.keys(sampler._samplersByOperation).length, 1);\n    });\n\n    it('should add per-op samplers up to maxOperations', () => {\n        let sampler = new PerOperationSampler(strategies, 2);\n        sampler.isSampled('op2', {});\n        assert.equal(Object.keys(sampler._samplersByOperation).length, 2);\n    });\n\n    it('should fallback to probabilistic sampler after maxOperations', () => {\n        let sampler = new PerOperationSampler(strategies, 1); // maxOperation = 1\n        let s1 = sampler._defaultSampler;\n        let exp = sinon.mock(s1).expects('isSampled');\n        exp.exactly(2);\n        sampler.isSampled('op2', {});\n        sampler.isSampled('op3', {});\n        assert.equal(Object.keys(sampler._samplersByOperation).length, 1);\n        exp.verify();\n    });\n\n    it('should update samplers', () => {\n        let sampler = new PerOperationSampler(strategies, 2);\n        let updated: PerOperationSamplingStrategies = {\n            defaultLowerBoundTracesPerSecond: 2,\n            defaultSamplingProbability: 0.333,\n            perOperationStrategies: [\n                {\n                    operation: 'op1',\n                    probabilisticSampling: { samplingRate: 0.01 }\n                },\n                {\n                    operation: 'op2',\n                    probabilisticSampling: { samplingRate: 0.001 }\n                }\n            ]\n        };\n        let isUpdated: boolean = sampler.update(updated);\n        assert.isTrue(isUpdated);\n        assert.equal(sampler._defaultLowerBound, 2);\n        assert.isObject(sampler._defaultSampler);\n        assert.equal(sampler._defaultSampler.samplingRate, 0.333);\n        assert.equal(Object.keys(sampler._samplersByOperation).length, 2);\n        let s1 = sampler._samplersByOperation['op1'];\n        assert.isObject(s1);\n        assert.isObject(s1._probabilisticSampler);\n        assert.equal(s1._probabilisticSampler.samplingRate, 0.01);\n        let s2 = sampler._samplersByOperation['op2'];\n        assert.isObject(s2);\n        assert.isObject(s2._probabilisticSampler);\n        assert.equal(s2._probabilisticSampler.samplingRate, 0.001);\n    });\n\n    it('should not update samplers if strategies did not change', () => {\n        let strategies: PerOperationSamplingStrategies = {\n            defaultLowerBoundTracesPerSecond: 2,\n            defaultSamplingProbability: 0.333,\n            perOperationStrategies: [\n                {\n                    operation: 'op1',\n                    probabilisticSampling: { samplingRate: 0.01 }\n                },\n                {\n                    operation: 'op2',\n                    probabilisticSampling: { samplingRate: 0.001 }\n                }\n            ]\n        };\n        let sampler = new PerOperationSampler(strategies, 2);\n        let s0 = sampler._defaultSampler;\n        let s1 = sampler._samplersByOperation['op1'];\n        let s2 = sampler._samplersByOperation['op2'];\n\n        let isUpdated: boolean = sampler.update(strategies);\n        assert.isFalse(isUpdated);\n        assert.strictEqual(sampler._defaultSampler, s0);\n        assert.strictEqual(sampler._samplersByOperation['op1'], s1);\n        assert.strictEqual(sampler._samplersByOperation['op2'], s2);\n    });\n});\n"]}