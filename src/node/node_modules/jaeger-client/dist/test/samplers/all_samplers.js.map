{"version":3,"sources":["../../../test/samplers/all_samplers.js"],"names":["constants","describe","samplers","useCallback","sampler","defaultLowerBoundTracesPerSecond","defaultSamplingProbability","perOperationStrategies","forEach","o","it","description","closeCallback","spy","close","calledOnce","SAMPLER_TYPE_CONST","param","decision","SAMPLER_TYPE_PROBABILISTIC","SAMPLER_TYPE_RATE_LIMITING","samplerSetup","toString","expectedTags","expectedDecision","SAMPLER_TYPE_TAG_KEY","SAMPLER_PARAM_TAG_KEY","actualTags","isSampled","equal","deepEqual","before","isOk","otherSampler","isNotOk","to","throw","tags"],"mappings":"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","file":"all_samplers.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport {assert, expect} from 'chai';\nimport sinon from 'sinon';\nimport * as constants from '../../src/constants.js';\nimport ConstSampler from '../../src/samplers/const_sampler.js';\nimport ProbabilisticSampler from '../../src/samplers/probabilistic_sampler.js';\nimport RateLimitingSampler from '../../src/samplers/ratelimiting_sampler.js';\nimport GuaranteedThroughputSampler from '../../src/samplers/guaranteed_throughput_sampler.js';\nimport PerOperationSampler from '../../src/samplers/per_operation_sampler.js';\nimport RemoteSampler from '../../src/samplers/remote_sampler.js';\nimport combinations from '../lib/combinations.js'\n\ndescribe('All samplers', () => {\n    describe('should support close()', () => {\n        let samplers = combinations({\n            useCallback: [true, false],\n            sampler: [\n                new ConstSampler(true),\n                new ConstSampler(false),\n                new ProbabilisticSampler(0.5),\n                new RateLimitingSampler(2),\n                new GuaranteedThroughputSampler(2, 0.5),\n                new PerOperationSampler({\n                    defaultLowerBoundTracesPerSecond: 2,\n                    defaultSamplingProbability: 0.01,\n                    perOperationStrategies: [],\n                }, 200),\n                new RemoteSampler('some-service-name')\n            ]\n        });\n\n        samplers.forEach((o: any) => {\n            it (o.description, () => {\n                if (o.useCallback) {\n                    let closeCallback = sinon.spy();\n                    o.sampler.close(closeCallback);\n                    assert(closeCallback.calledOnce);\n                } else {\n                    o.sampler.close();\n                }\n            });\n        });\n    });\n\n    describe('should return correct tags', () => {\n        var samplers = [\n            {sampler: new ConstSampler(true), 'type': constants.SAMPLER_TYPE_CONST, param: true, decision: true},\n            {sampler: new ConstSampler(false), 'type': constants.SAMPLER_TYPE_CONST, param: false, decision: false},\n            {sampler: new ProbabilisticSampler(1.0), 'type': constants.SAMPLER_TYPE_PROBABILISTIC, param: 1.0, decision: true},\n            {sampler: new RateLimitingSampler(0.0001, 0), 'type': constants.SAMPLER_TYPE_RATE_LIMITING, param: 0.0001, decision: false},\n            {\n                sampler: new RemoteSampler('some-caller-name', {sampler: new ProbabilisticSampler(1.0)}),\n                'type': constants.SAMPLER_TYPE_PROBABILISTIC,\n                param: 1.0,\n                decision: true\n            },\n        ];\n\n        samplers.forEach((samplerSetup: any) => {\n            let sampler = samplerSetup['sampler'];\n            it(sampler.toString(), () => {\n                let expectedTags = {};\n                let expectedDecision = !!samplerSetup['decision'];\n                let description = `${sampler.toString()}, param=${samplerSetup['param']}`;\n\n                if (expectedDecision) {\n                    expectedTags[constants.SAMPLER_TYPE_TAG_KEY] = samplerSetup['type'];\n                    expectedTags[constants.SAMPLER_PARAM_TAG_KEY] = samplerSetup['param'];\n                }\n                let actualTags = {};\n                let decision = sampler.isSampled('operation', actualTags);\n                assert.equal(decision, expectedDecision, description);\n                assert.deepEqual(actualTags, expectedTags, description);\n            });\n        });\n    });\n\n});\n\ndescribe('ConstSampler', () => {\n    let sampler;\n    before(() => {\n        sampler = new ConstSampler(true);\n    });\n\n    it('decision reflects given parameter', () => {\n        assert.isOk(sampler.decision);\n    });\n\n    it ('does NOT equal another type of sampler', () => {\n        let otherSampler = new ProbabilisticSampler(0.5);\n        assert.isNotOk(sampler.equal(otherSampler));\n    });\n\n    it ('does equal the same type of sampler', () => {\n        let otherSampler = new ConstSampler(true);\n        assert.isOk(sampler.equal(otherSampler));\n    });\n});\n\ndescribe('ProbabilisticSampler', () => {\n    it ('throws error on out of range sampling rate', () => {\n        expect(() => { new ProbabilisticSampler(2.0); }).to.throw('The sampling rate must be less than 0.0 and greater than 1.0. Received 2');\n    });\n\n    it ('calls is Sampled, and returns false', () => {\n        let sampler = new ProbabilisticSampler(0.0);\n        let tags = {};\n        assert.isNotOk(sampler.isSampled('operation', tags));\n        assert.deepEqual(tags, {});\n    });\n\n    it ('does NOT equal another type of sampler', () => {\n        let sampler = new ProbabilisticSampler(0.0);\n        let otherSampler = new ConstSampler(true);\n        assert.isNotOk(sampler.equal(otherSampler));\n    });\n});\n"]}