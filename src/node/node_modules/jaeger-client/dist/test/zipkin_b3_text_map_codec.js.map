{"version":3,"sources":["../../test/zipkin_b3_text_map_codec.js"],"names":["constants","describe","tracer","codec","metrics","beforeEach","urlEncoding","registerInjector","FORMAT_HTTP_HEADERS","registerExtractor","afterEach","close","it","headers","context","extract","isOk","counterEquals","decodingErrors","JAEGER_DEBUG_HEADER","encodeURIComponent","equal","debugId","testCases","forEach","testCase","isNotOk","spanIdStr","traceIdStr","parentIdStr","isSampled","isDebug","ctx","withStringIds","inject","isUndefined","flags","SAMPLED_MASK","DEBUG_MASK","TRACER_BAGGAGE_HEADER_PREFIX","JAEGER_BAGGAGE_HEADER","baggage"],"mappings":"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","file":"zipkin_b3_text_map_codec.js","sourcesContent":["// Copyright (c) 2017 The Jaeger Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport {assert} from 'chai';\nimport * as constants from '../src/constants.js';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport opentracing from 'opentracing';\nimport Tracer from '../src/tracer.js';\nimport Metrics from '../src/metrics/metrics.js';\nimport LocalMetricFactory from './lib/metrics/local/metric_factory.js';\nimport LocalBackend from './lib/metrics/local/backend.js';\nimport SpanContext from '../src/span_context.js';\nimport ZipkinB3TextMapCodec from '../src/propagators/zipkin_b3_text_map_codec.js';\n\ndescribe('Zipkin B3 Text Map Codec should', () => {\n\n    let tracer, codec, metrics;\n\n    beforeEach(() => {\n        metrics = new Metrics(new LocalMetricFactory());\n        tracer = new Tracer(\n            'test-tracer',\n            new InMemoryReporter(),\n            new ConstSampler(false), {\n                metrics: metrics\n            }\n        );\n\n        codec = new ZipkinB3TextMapCodec({\n            urlEncoding: true,\n            metrics: metrics,\n        });\n\n        tracer.registerInjector(opentracing.FORMAT_HTTP_HEADERS, codec);\n        tracer.registerExtractor(opentracing.FORMAT_HTTP_HEADERS, codec);\n    });\n\n    afterEach(() => {\n        tracer.close();\n    });\n\n    it ('report a metric when failing to decode tracer state', () => {\n        let headers = {\n            'x-b3-traceid': 'zzz-bad-value'\n        };\n\n        let context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n\n        assert.isOk(context);\n        assert.isOk(LocalBackend.counterEquals(metrics.decodingErrors, 1));\n    });\n\n    it ('set debug flag when debug-id-header is received', () => {\n        let headers = {};\n        headers[constants.JAEGER_DEBUG_HEADER] = encodeURIComponent('value1');\n\n        let context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n        assert.equal(context.debugId, 'value1');\n    });\n\n    it ('return a context devoid of trace/span ids if invalid ids are encountered in the headers', () => {\n\n        let testCases = [\n            {\n                'x-b3-traceid': 'zzzzzz',\n                'x-b3-spanid': '123abc',\n                'x-b3-parentspanid': '456def'\n            },\n            {\n                'x-b3-traceid': '123abc',\n                'x-b3-spanid': 'zzzzzz',\n                'x-b3-parentspanid': '456def'\n            },\n            {\n                'x-b3-traceid': '123abc',\n                'x-b3-spanid': '456def',\n                'x-b3-parentspanid': 'zzzzz'\n            }\n        ];\n\n        testCases.forEach((testCase) => {\n            let context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, testCase);\n\n            assert.isOk(context);\n            assert.isNotOk(context.spanIdStr);\n            assert.isNotOk(context.traceIdStr);\n            assert.isNotOk(context.parentIdStr);\n        });\n    });\n\n    it ('set the sampled flag when the zipkin sampled header is received', () => {\n        let headers = {\n            'x-b3-sampled': '1'\n        };\n\n        let context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n        assert.isOk(context.isSampled());\n        assert.isNotOk(context.isDebug());\n    });\n\n    it ('set the debug and sampled flags when the zipkin flags header is received', () => {\n        let headers = {\n            'x-b3-flags': '1'\n        };\n\n        let context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n        assert.isOk(context.isSampled());\n        assert.isOk(context.isDebug());\n\n        headers = {\n            'x-b3-flags': '0'\n        };\n\n        context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n        assert.isNotOk(context.isSampled());\n        assert.isNotOk(context.isDebug());\n    });\n\n    it ('should set the sampled header to \"0\" if not sampling', () => {\n        let headers = {};\n\n        let ctx = SpanContext.withStringIds('some-trace', 'some-span', 'some-parent');\n        codec.inject(ctx, headers);\n\n        assert.isUndefined(headers['x-b3-flags']);\n        assert.equal(headers['x-b3-sampled'], '0');\n    });\n\n    it ('should set the sampled header to \"1\" if sampling', () => {\n        let headers = {};\n\n        let ctx = SpanContext.withStringIds('a', 'b', 'c');\n        ctx.flags = constants.SAMPLED_MASK;\n\n        codec.inject(ctx, headers);\n\n        assert.isUndefined(headers['x-b3-flags']);\n        assert.equal(headers['x-b3-sampled'], '1');\n    });\n\n    it ('should not send the sampled header if debug', () => {\n        let headers = {};\n\n        let ctx = SpanContext.withStringIds('some-trace', 'some-span', 'some-parent');\n        ctx.flags = constants.DEBUG_MASK\n\n        codec.inject(ctx, headers);\n\n        assert.equal(headers['x-b3-flags'], '1');\n        // > Since Debug implies Sampled, so don't also send \"X-B3-Sampled: 1\"\n        // https://github.com/openzipkin/b3-propagation\n        assert.isUndefined(headers['x-b3-sampled']);\n    });\n\n    it ('supports the use of the baggage headers', () => {\n        let headers = {};\n        headers[constants.TRACER_BAGGAGE_HEADER_PREFIX + 'a-key'] = 'a-value';\n        headers[constants.JAEGER_BAGGAGE_HEADER] = 'some-key=some-value, another-key=another-value';\n\n        let context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n        assert.equal(context.baggage['a-key'], 'a-value');\n        assert.equal(context.baggage['some-key'], 'some-value');\n        assert.equal(context.baggage['another-key'], 'another-value');\n    });\n});\n"]}