{"version":3,"sources":["../../../test/baggage/baggage_setter.js"],"names":["describe","metrics","reporter","tracer","span","assertBaggageLogs","log","key","value","truncated","override","invalid","fields","forEach","kv","equal","event","beforeEach","startSpan","afterEach","close","it","mgr","stub","setter","spanContext","setBaggage","isUndefined","_baggage","_logs","counterValue","baggageUpdateFailure","expected","_spanContext","context","withBaggageItem","baggageUpdateSuccess","baggageTruncate","baggageRestrictionManager","lengthOf"],"mappings":"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","file":"baggage_setter.js","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport {assert} from 'chai';\nimport Metrics from '../../src/metrics/metrics.js';\nimport LocalMetricFactory from '../lib/metrics/local/metric_factory.js';\nimport LocalBackend from '../lib/metrics/local/backend.js';\nimport BaggageSetter from \"../../src/baggage/baggage_setter.js\";\nimport Tracer from '../../src/tracer.js';\nimport InMemoryReporter from '../../src/reporters/in_memory_reporter.js';\nimport ConstSampler from '../../src/samplers/const_sampler.js';\nimport DefaultBaggageRestrictionManager from \"../../src/baggage/default_baggage_restriction_manager.js\";\nimport Restriction from \"../../src/baggage/restriction\";\nimport sinon from 'sinon';\n\ndescribe('BaggageSetter should', () => {\n    let metrics: Metrics;\n    let reporter = new InMemoryReporter();\n    let tracer, span;\n\n    let assertBaggageLogs = function(log, key, value, truncated, override, invalid) {\n        let fields: { [key: string]: string } = {};\n        log.fields.forEach((kv) => {\n           fields[kv.key] = kv.value;\n        });\n        assert.equal(fields.event, 'baggage');\n        assert.equal(fields.key, key);\n        assert.equal(fields.value, value);\n        if (truncated) {\n            assert.equal(fields.truncated, 'true');\n        }\n        if (override) {\n            assert.equal(fields.override, 'true');\n        }\n        if (invalid) {\n            assert.equal(fields.invalid, 'true');\n        }\n    };\n\n    beforeEach(() => {\n        metrics = new Metrics(new LocalMetricFactory());\n\n        tracer = new Tracer(\n            'test-service-name',\n            reporter,\n            new ConstSampler(true),\n            {\n                metrics: metrics,\n            }\n        );\n\n        span = tracer.startSpan('op-name');\n    });\n\n    afterEach(() => {\n        tracer.close();\n    });\n\n    it ('fail for invalid baggage key', () => {\n        let mgr = new DefaultBaggageRestrictionManager();\n        sinon.stub(mgr, 'getRestriction', function(key) {\n            return new Restriction(false, 0);\n        });\n        let setter = new BaggageSetter(mgr, metrics);\n        let key = \"key\";\n        let value = \"value\";\n        let spanContext = setter.setBaggage(span, key, value);\n        assert.isUndefined(spanContext._baggage[key]);\n        assertBaggageLogs(span._logs[0], key, value, false, false, true);\n        assert.equal(LocalBackend.counterValue(metrics.baggageUpdateFailure), 1);\n    });\n\n    it ('truncate valid baggage key using maxValueLength', () => {\n        let setter = new BaggageSetter(new DefaultBaggageRestrictionManager(5), metrics);\n        let key = \"key\";\n        let value = \"0123456789\";\n        let expected = \"01234\";\n        // Set pre existing baggage to context\n        span._spanContext = span.context().withBaggageItem(key, value);\n\n        let spanContext = setter.setBaggage(span, key, value);\n        assert.equal(spanContext._baggage[key], expected);\n        assertBaggageLogs(span._logs[0], key, expected, true, true, false);\n        assert.equal(LocalBackend.counterValue(metrics.baggageUpdateSuccess), 1);\n        assert.equal(LocalBackend.counterValue(metrics.baggageTruncate), 1);\n    });\n\n    it ('not set logs if span is not sampled', () => {\n        let mgr = new DefaultBaggageRestrictionManager();\n        tracer = new Tracer(\n            'test-service-name',\n            reporter,\n            new ConstSampler(false),\n            {\n                metrics: metrics,\n                baggageRestrictionManager: mgr,\n            }\n        );\n        span = tracer.startSpan('op-name');\n\n        let setter = new BaggageSetter(mgr, metrics);\n        let key = \"key\";\n        let value = \"0123456789\";\n        let spanContext = setter.setBaggage(span, key, value);\n        assert.equal(spanContext._baggage[key], value);\n        assert.lengthOf(span._logs, 0);\n    });\n});\n"]}