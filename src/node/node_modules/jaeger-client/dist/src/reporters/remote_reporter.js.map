{"version":3,"sources":["../../../src/reporters/remote_reporter.js"],"names":["DEFAULT_BUFFER_FLUSH_INTERVAL_MILLIS","RemoteReporter","sender","options","Error","_bufferFlushInterval","bufferFlushInterval","_logger","logger","_sender","_intervalHandle","setInterval","flush","_metrics","metrics","span","response","append","spanToThrift","err","error","reporterDropped","increment","numSpans","callback","reporterFailure","reporterSuccess","clearInterval","close","serviceName","tags","_process","getThriftTags","setProcess"],"mappings":";;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,uCAAuC,KAA7C;;IAEqBC,c;AAQjB,4BAAYC,MAAZ,EAC+B;AAAA;;AAAA,YAAnBC,OAAmB,uEAAJ,EAAI;;AAAA;;AAC3B,YAAI,CAACD,MAAL,EAAa;AACT,kBAAM,IAAIE,KAAJ,CAAU,wCAAV,CAAN;AACH;;AAED,aAAKC,oBAAL,GAA4BF,QAAQG,mBAAR,IAA+BN,oCAA3D;AACA,aAAKO,OAAL,GAAeJ,QAAQK,MAAR,IAAkB,sBAAjC;AACA,aAAKC,OAAL,GAAeP,MAAf;AACA,aAAKQ,eAAL,GAAuBC,YAAY,YAAM;AACrC,kBAAKC,KAAL;AACH,SAFsB,EAEpB,KAAKP,oBAFe,CAAvB;AAGA,aAAKQ,QAAL,GAAgBV,QAAQW,OAAR,IAAmB,sBAAY,8BAAZ,CAAnC;AACH;;;;+BAEc;AACX,mBAAO,gBAAP;AACH;;;+BAEMC,I,EAAkB;AACrB,gBAAIC,WAA2B,KAAKP,OAAL,CAAaQ,MAAb,CAAoB,iBAAYC,YAAZ,CAAyBH,IAAzB,CAApB,CAA/B;AACA,gBAAIC,SAASG,GAAb,EAAkB;AACd,qBAAKZ,OAAL,CAAaa,KAAb,CAAmB,qCAAnB;AACA,qBAAKP,QAAL,CAAcQ,eAAd,CAA8BC,SAA9B,CAAwCN,SAASO,QAAjD;AACH;AACJ;;;8BAEKC,Q,EAA2B;AAC7B,gBAAIR,WAA2B,KAAKP,OAAL,CAAaG,KAAb,EAA/B;AACA,gBAAII,SAASG,GAAb,EAAkB;AACd,qBAAKZ,OAAL,CAAaa,KAAb,CAAmB,oCAAnB;AACA,qBAAKP,QAAL,CAAcY,eAAd,CAA8BH,SAA9B,CAAwCN,SAASO,QAAjD;AACH,aAHD,MAGO;AACH,qBAAKV,QAAL,CAAca,eAAd,CAA8BJ,SAA9B,CAAwCN,SAASO,QAAjD;AACH;;AAED,gBAAIC,QAAJ,EAAc;AACVA;AACH;AACJ;;;8BAEKA,Q,EAA2B;AAC7BG,0BAAc,KAAKjB,eAAnB;AACA,iBAAKD,OAAL,CAAaG,KAAb;AACA,iBAAKH,OAAL,CAAamB,KAAb;;AAEA,gBAAIJ,QAAJ,EAAc;AACVA;AACH;AACJ;;;mCAEUK,W,EAAqBC,I,EAAwB;AACpD,iBAAKC,QAAL,GAAgB;AACZ,+BAAeF,WADH;AAEZ,wBAAQ,iBAAYG,aAAZ,CAA0BF,IAA1B;AAFI,aAAhB;;AAKA,iBAAKrB,OAAL,CAAawB,UAAb,CAAwB,KAAKF,QAA7B;AACH;;;;;;kBAlEgB9B,c","file":"remote_reporter.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport NullLogger from '../logger.js';\nimport ThriftUtils from '../thrift.js';\nimport Metrics from '../metrics/metrics.js';\nimport NoopMetricFactory from '../metrics/noop/metric_factory';\n\nconst DEFAULT_BUFFER_FLUSH_INTERVAL_MILLIS = 10000;\n\nexport default class RemoteReporter {\n    _bufferFlushInterval: number;\n    _logger: Logger;\n    _sender: Sender;\n    _intervalHandle: any;\n    _process: Process;\n    _metrics: any;\n\n    constructor(sender: Sender,\n                options: any = {}) {\n        if (!sender) {\n            throw new Error('RemoteReporter must be given a Sender.');\n        }\n\n        this._bufferFlushInterval = options.bufferFlushInterval || DEFAULT_BUFFER_FLUSH_INTERVAL_MILLIS;\n        this._logger = options.logger || new NullLogger();\n        this._sender = sender;\n        this._intervalHandle = setInterval(() => {\n            this.flush();\n        }, this._bufferFlushInterval);\n        this._metrics = options.metrics || new Metrics(new NoopMetricFactory());\n    }\n\n    name(): string {\n        return 'RemoteReporter';\n    }\n\n    report(span: Span): void {\n        let response: SenderResponse = this._sender.append(ThriftUtils.spanToThrift(span));\n        if (response.err) {\n            this._logger.error('Failed to append spans in reporter.');\n            this._metrics.reporterDropped.increment(response.numSpans);\n        }\n    }\n\n    flush(callback: ?Function): void {\n        let response: SenderResponse = this._sender.flush();\n        if (response.err) {\n            this._logger.error('Failed to flush spans in reporter.');\n            this._metrics.reporterFailure.increment(response.numSpans);\n        } else {\n            this._metrics.reporterSuccess.increment(response.numSpans);\n        }\n\n        if (callback) {\n            callback();\n        }\n    }\n\n    close(callback: ?Function): void {\n        clearInterval(this._intervalHandle);\n        this._sender.flush();\n        this._sender.close();\n\n        if (callback) {\n            callback();\n        }\n    }\n\n    setProcess(serviceName: string, tags: Array<Tag>): void {\n        this._process = {\n            'serviceName': serviceName,\n            'tags': ThriftUtils.getThriftTags(tags)\n        };\n\n        this._sender.setProcess(this._process);\n    }\n}\n"]}