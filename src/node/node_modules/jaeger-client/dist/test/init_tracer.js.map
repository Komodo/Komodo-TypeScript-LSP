{"version":3,"sources":["../../test/init_tracer.js"],"names":["describe","it","config","serviceName","disable","tracer","to","be","an","instanceof","Tracer","_sampler","_reporter","options","type","param","expectedType","expectedParam","each","samplerConfig","sampler","count","err","equal","reporter","logSpans","agentHost","agentPort","flushIntervalMs","remoteReporter","i","_reporters","length","_bufferFlushInterval","_sender","_host","_port","logger","info","msg","metrics","createCounter","createGauge","createTimer","tags","_logger","_metrics","_factory","_tags"],"mappings":"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","file":"init_tracer.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport {assert, expect} from 'chai';\nimport NoopReporter from '../src/reporters/noop_reporter';\nimport CompositeReporter from '../src/reporters/composite_reporter';\nimport RemoteReporter from '../src/reporters/remote_reporter';\nimport ConstSampler from '../src/samplers/const_sampler';\nimport ProbabilisticSampler from '../src/samplers/probabilistic_sampler';\nimport RemoteSampler from '../src/samplers/remote_sampler';\nimport RateLimitingSampler from '../src/samplers/ratelimiting_sampler';\nimport {initTracer} from '../src/index.js';\nimport opentracing from 'opentracing';\n\ndescribe('initTracer', () => {\n    it ('should initialize noop tracer when disable is set', () => {\n        let config = {\n            serviceName: 'test-service',\n            disable: true\n        };\n        let tracer = initTracer(config);\n\n        expect(tracer).to.be.an.instanceof(opentracing.Tracer);\n    });\n\n    it ('should initialize normal tracer when only service name given', () => {\n        let config = {\n            serviceName: 'test-service'\n        };\n        let tracer = initTracer(config);\n\n        expect(tracer._sampler).to.be.an.instanceof(RemoteSampler);\n        expect(tracer._reporter).to.be.an.instanceof(RemoteReporter);\n    });\n\n    it ('should initialize proper samplers', () => {\n        var config = {\n            serviceName: 'test-service'\n        };\n        var options = [\n            { type: 'const', param: 1, expectedType: ConstSampler, expectedParam: 1 },\n            { type: 'ratelimiting', param: 2, expectedType: RateLimitingSampler, expectedParam: 2 },\n            { type: 'probabilistic', param: 0.5, expectedType: ProbabilisticSampler, expectedParam: 0.5 },\n            { type: 'remote', param: 1, expectedType: RemoteSampler, expectedParam: 1 }\n        ];\n\n        _.each(options, (samplerConfig) => {\n            let expectedType = samplerConfig.expectedType;\n            let expectedParam = samplerConfig.expectedParam;\n            delete samplerConfig.expectedType;\n            delete samplerConfig.expectedParam;\n\n            config.sampler = samplerConfig;\n            let tracer = initTracer(config);\n\n            expect(tracer._sampler).to.be.an.instanceof(expectedType);\n            // TODO(oibe:head) test utils for expectedParam here?\n        });\n    });\n\n    it ('should throw error on sampler incorrect type', () => {\n        var config = {\n            serviceName: 'test-service'\n        };\n        var options = [\n            { type: 'const', param: 'bad-value' },\n            { type: 'ratelimiting', param: 'bad-value' },\n            { type: 'probabilistic', param: 'bad-value' },\n            { type: 'remote', param: 'bad-value' },\n        ];\n\n        let count = 0;\n        _.each(options, (samplerConfig) => {\n            config.sampler = samplerConfig;\n\n            // Since its an error from a third party framework, its hard to assert on\n            // using expect.\n            try {\n                initTracer(config);\n            } catch(err) {\n                count +=1;\n            }\n        });\n\n        assert.equal(count, 4);\n    });\n\n    it ('should respect reporter options', () => {\n        let config = {\n            serviceName: 'test-service',\n            sampler: {\n                type: 'const',\n                param: 0\n            },\n            reporter: {\n                logSpans: true,\n                agentHost: '127.0.0.1',\n                agentPort: 4939,\n                flushIntervalMs: 2000\n            }\n        }\n        let tracer = initTracer(config);\n\n        expect(tracer._reporter).to.be.an.instanceof(CompositeReporter);\n        let remoteReporter;\n        for (let i = 0; i < tracer._reporter._reporters.length; i++) {\n            let reporter = tracer._reporter._reporters[i];\n            if (reporter instanceof RemoteReporter) {\n                remoteReporter = reporter;\n                break;\n            }\n        }\n\n        assert.equal(remoteReporter._bufferFlushInterval, 2000);\n        assert.equal(remoteReporter._sender._host, '127.0.0.1');\n        assert.equal(remoteReporter._sender._port, 4939);\n    });\n\n    it ('should pass options to tracer', () => {\n        var logger = {\n            'info': function info(msg){}\n        };\n        var metrics = {\n            'createCounter': function createCounter() { return {}; },\n            'createGauge': function createGauge() { return {}; },\n            'createTimer': function createTimer() { return {}; },\n        };\n        let tracer = initTracer({\n            serviceName: 'test-service'\n        }, {\n            logger: logger,\n            metrics: metrics,\n            tags: {\n                'x': 'y'\n            }\n        });\n        assert.equal(tracer._logger, logger);\n        assert.equal(tracer._metrics._factory, metrics);\n        assert.equal(tracer._tags['x'], 'y');\n    });\n});\n"]}