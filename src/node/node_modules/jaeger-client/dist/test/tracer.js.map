{"version":3,"sources":["../../test/tracer.js"],"names":["constants","opentracing","describe","tracer","reporter","beforeEach","afterEach","clear","close","it","headers","TRACER_BAGGAGE_HEADER_PREFIX","JAEGER_BAGGAGE_HEADER","spanContext","extract","FORMAT_TEXT_MAP","rootSpan","startSpan","childOf","isOk","context","traceId","isNotOk","parentId","equal","flags","getBaggageItem","encodeInt64","spanId","withBinaryIds","start","rpcServer","internalTags","references","tags","span","_startInternalSpan","deepEqual","_startTime","Object","keys","_tags","length","_report","spans","actualTags","sortBy","o","key","value","startTime","Date","getTime","isSampled","childOfParams","operationName","referenceParams","Reference","REFERENCE_CHILD_OF","assertByStartSpanParameters","params","SAMPLED_MASK","keyOne","keyTwo","baggage","savedContext","assertByFormat","format","carrier","inject","extractedContext","FORMAT_HTTP_HEADERS","to","throw","each","metrics","sampled","fromString","Tags","SPAN_KIND","SPAN_KIND_RPC_SERVER","metricName","counterEquals","spansFinished"],"mappings":"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","file":"tracer.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport {assert, expect} from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport * as constants from '../src/constants.js';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport * as opentracing from 'opentracing';\nimport {Tags as opentracing_tags} from 'opentracing';\nimport SpanContext from '../src/span_context.js';\nimport Tracer from '../src/tracer.js';\nimport Utils from '../src/util.js';\nimport Metrics from '../src/metrics/metrics.js';\nimport LocalMetricFactory from './lib/metrics/local/metric_factory.js';\nimport LocalBackend from './lib/metrics/local/backend.js';\n\ndescribe('tracer should', () => {\n    let tracer;\n    let reporter = new InMemoryReporter();\n\n    beforeEach(() => {\n        tracer = new Tracer(\n            'test-service-name',\n            reporter,\n            new ConstSampler(true)\n        );\n    });\n\n    afterEach(() => {\n        reporter.clear();\n        tracer.close();\n    });\n\n    it ('begin a new span given only baggage headers', () => {\n        // Users sometimes want to pass baggage even if there is no span.\n        // In this case we must ensure a new root span is created.\n        let headers = {};\n        // combine normal baggage encoding\n        headers[constants.TRACER_BAGGAGE_HEADER_PREFIX + 'robot'] = 'Bender';\n        // with custom encoding via `jaeger-baggage` header\n        headers[constants.JAEGER_BAGGAGE_HEADER] = 'male=Fry, female=Leela, Lord Nibbler';\n        let spanContext = tracer.extract(opentracing.FORMAT_TEXT_MAP, headers);\n        let rootSpan = tracer.startSpan('fry', { childOf: spanContext });\n\n        assert.isOk(rootSpan.context().traceId);\n        assert.isNotOk(rootSpan.context().parentId);\n        assert.equal(rootSpan.context().flags, 1);\n        assert.equal('Bender', rootSpan.getBaggageItem('robot'));\n        assert.equal('Leela', rootSpan.getBaggageItem('female'));\n        assert.equal('Fry', rootSpan.getBaggageItem('male'));\n    });\n\n    it('create a span correctly through _startInternalSpan', () => {\n        let traceId = Utils.encodeInt64(1);\n        let spanId = Utils.encodeInt64(2);\n        let parentId = Utils.encodeInt64(3);\n        let flags = 1;\n        let context = SpanContext.withBinaryIds(traceId, spanId, parentId, flags);\n        let start = 123.456;\n        let rpcServer = false;\n        let internalTags = [];\n        let references = [];\n        let tags = {\n            'keyOne': 'leela',\n            'keyTwo': 'bender'\n        };\n        let span = tracer._startInternalSpan(context, 'op-name', start, internalTags, tags, null, rpcServer, references);\n\n        assert.deepEqual(span.context().traceId, traceId);\n        assert.deepEqual(span.context().spanId, spanId);\n        assert.deepEqual(span.context().parentId, parentId);\n        assert.equal(span.context().flags, flags);\n        assert.equal(span._startTime, start);\n        assert.equal(Object.keys(span._tags).length, 2);\n    });\n\n    it ('report a span with no tracer level tags', () => {\n        let span = tracer.startSpan('op-name');\n        tracer._report(span);\n        assert.isOk(reporter.spans.length, 1);\n        let actualTags = _.sortBy(span._tags, (o) => {\n            return o.key;\n        });\n\n        assert.equal(2, actualTags.length);\n        assert.equal(actualTags[0].key, 'sampler.param');\n        assert.equal(actualTags[1].key, 'sampler.type');\n        assert.equal(actualTags[0].value, true);\n        assert.equal(actualTags[1].value, 'const');\n    });\n\n    it ('start a root span with proper structure', () => {\n        let startTime = new Date(2016, 8, 18).getTime();\n        let span = tracer.startSpan('test-name', {\n            startTime: startTime\n        });\n\n        assert.equal(span.context().traceId, span.context().spanId);\n        assert.isNotOk(span.context().parentId);\n        assert.isOk(span.context().isSampled());\n        assert.equal(span._startTime, startTime);\n    });\n\n    it ('start a child span represented as a separate span from parent, using childOf and references', () => {\n        let traceId = Utils.encodeInt64(1);\n        let spanId = Utils.encodeInt64(2);\n        let parentId = Utils.encodeInt64(3);\n        let flags = 1;\n        let context = SpanContext.withBinaryIds(traceId, spanId, parentId, flags);\n        let startTime = 123.456;\n\n        let childOfParams = {\n            operationName: 'test-name',\n            childOf: context,\n            startTime: startTime\n        };\n\n        let referenceParams = {\n            operationName: 'test-name',\n            startTime: startTime,\n            references: [new opentracing.Reference(opentracing.REFERENCE_CHILD_OF, context)],\n        };\n\n        let assertByStartSpanParameters = (params) => {\n            let span = tracer.startSpan('test-span', params);\n            assert.deepEqual(span.context().traceId, traceId);\n            assert.deepEqual(span.context().parentId, spanId);\n            assert.equal(span.context().flags, constants.SAMPLED_MASK);\n            assert.equal(span._startTime, startTime);\n        };\n\n        assertByStartSpanParameters(childOfParams);\n        assertByStartSpanParameters(referenceParams);\n    });\n\n    it ('inject plain text headers into carrier, and extract span context with the same value', () => {\n        let keyOne = 'keyOne';\n        let keyTwo = 'keyTwo';\n        let baggage = {\n            keyOne: 'leela',\n            keyTwo: 'bender'\n        };\n        let savedContext = SpanContext.withBinaryIds(\n            Utils.encodeInt64(1),\n            Utils.encodeInt64(2),\n            Utils.encodeInt64(3),\n            constants.SAMPLED_MASK,\n            baggage\n        );\n\n        let assertByFormat = (format) => {\n            let carrier = {};\n            tracer.inject(savedContext, format, carrier);\n            let extractedContext = tracer.extract(format, carrier);\n\n            assert.deepEqual(savedContext.traceId, extractedContext.traceId);\n            assert.deepEqual(savedContext.spanId, extractedContext.spanId);\n            assert.deepEqual(savedContext.parentId, extractedContext.parentId);\n            assert.equal(savedContext.flags, extractedContext.flags);\n            assert.equal(savedContext.baggage[keyOne], extractedContext.baggage[keyOne]);\n            assert.equal(savedContext.baggage[keyTwo], extractedContext.baggage[keyTwo]);\n        };\n\n        assertByFormat(opentracing.FORMAT_TEXT_MAP);\n        assertByFormat(opentracing.FORMAT_HTTP_HEADERS);\n    });\n\n    it ('inject url encoded values into headers', () => {\n        let baggage = {\n            keyOne: 'Leela vs. Bender',\n        };\n        let savedContext = SpanContext.withBinaryIds(\n            Utils.encodeInt64(1),\n            Utils.encodeInt64(2),\n            Utils.encodeInt64(3),\n            constants.SAMPLED_MASK,\n            baggage\n        );\n        let carrier = {};\n\n        tracer.inject(savedContext, opentracing.FORMAT_HTTP_HEADERS, carrier);\n        assert.equal(carrier['uberctx-keyOne'], 'Leela%20vs.%20Bender');\n    });\n\n    it ('assert inject and extract throw errors when given an invalid format', () => {\n        let carrier = {};\n        let context = SpanContext.withBinaryIds(\n            Utils.encodeInt64(1),\n            Utils.encodeInt64(2),\n            Utils.encodeInt64(3),\n            constants.SAMPLED_MASK\n        );\n\n        // subtle but expect wants a function to call not the result of a function call.\n        expect(() => {tracer.inject(context, 'fake-format', carrier)}).to.throw('Unsupported format: fake-format');\n        expect(() => {tracer.extract('fake-format', carrier)}).to.throw('Unsupported format: fake-format');\n    });\n\n    it ('report spans', () => {\n        let span = tracer.startSpan('operation');\n        tracer._report(span);\n\n        assert.equal(reporter.spans.length, 1);\n    });\n\n    describe('Metrics', () => {\n        it ('startSpan', () => {\n            let params = [\n                { 'rpcServer': false, 'context': null, 'sampled': true, 'metrics': ['spansStarted', 'spansSampled', 'tracesStartedSampled']},\n                { 'rpcServer': true, 'context': '1:2:100:1', 'sampled': true, 'metrics': ['spansStarted', 'spansSampled', 'tracesJoinedSampled']},\n                { 'rpcServer': false, 'context': null, 'sampled': false, 'metrics': ['spansStarted', 'spansNotSampled', 'tracesStartedNotSampled']},\n                { 'rpcServer': true, 'context': '1:2:100:0', 'sampled': false, 'metrics': ['spansStarted', 'spansNotSampled', 'tracesJoinedNotSampled']},\n            ];\n\n            _.each(params, (o) => {\n                let metrics = new Metrics(new LocalMetricFactory());\n                tracer = new Tracer('fry', new InMemoryReporter(), new ConstSampler(o.sampled), {\n                    metrics: metrics\n                });\n\n                let context = null;\n                if (o.context) {\n                    context = SpanContext.fromString(o.context);\n                }\n\n                let tags = {};\n                if (o.rpcServer) {\n                    tags[opentracing.Tags.SPAN_KIND] = opentracing.Tags.SPAN_KIND_RPC_SERVER;\n                }\n\n                tracer.startSpan('bender', {\n                    childOf: context,\n                    tags: tags\n                });\n\n                _.each(o.metrics, (metricName) => {\n                    assert.isOk(LocalBackend.counterEquals(metrics[metricName], 1));\n                });\n            });\n        });\n\n        it ('emits counter when report called', () => {\n            let metrics = new Metrics(new LocalMetricFactory());\n            tracer = new Tracer('fry', new InMemoryReporter(), new ConstSampler(true), {\n                metrics: metrics\n            });\n            let span = tracer.startSpan('bender');\n            tracer._report(span);\n\n            assert.isOk(LocalBackend.counterEquals(metrics.spansFinished, 1));\n        });\n    });\n});\n"]}