{"version":3,"sources":["../../src/thrift.js"],"names":["ThriftUtils","initialTags","thriftTags","i","length","tag","key","vLong","emptyBuffer","vBinary","vBool","vDouble","vStr","vType","valueType","value","_thrift","TagType","DOUBLE","BOOL","Buffer","BINARY","STRING","JSON","stringify","String","push","logs","thriftLogs","log","encodeInt64","timestamp","getThriftTags","fields","refs","thriftRefs","refEnum","ref","context","referencedContext","type","REFERENCE_CHILD_OF","SpanRefType","CHILD_OF","REFERENCE_FOLLOWS_FROM","FOLLOWS_FROM","refType","traceIdLow","traceId","traceIdHigh","spanId","span","tags","_tags","getThriftLogs","_logs","unsigned","_spanContext","parentSpanId","parentId","operationName","_operationName","references","spanRefsToThriftRefs","_references","flags","startTime","_startTime","duration","_duration","source","readFileSync","join","__dirname","allowOptionalArguments"],"mappings":";;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;IAEqBA,W;;;;;;;sCAOIC,W,EAAqC;AACtD,gBAAIC,aAAa,EAAjB;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,YAAYG,MAAhC,EAAwCD,GAAxC,EAA6C;AACzC,oBAAIE,MAAMJ,YAAYE,CAAZ,CAAV;;AAEA,oBAAIG,MAAcD,IAAIC,GAAtB;;AAEA,oBAAIC,QAAgBP,YAAYQ,WAAhC;AACA,oBAAIC,UAAkBT,YAAYQ,WAAlC;AACA,oBAAIE,QAAiB,KAArB;AACA,oBAAIC,UAAkB,CAAtB;AACA,oBAAIC,OAAe,EAAnB;;AAEA,oBAAIC,QAAgB,EAApB;AACA,oBAAIC,oBAAmBT,IAAIU,KAAvB,CAAJ;AACA,oBAAID,cAAc,QAAlB,EAA4B;AACxBD,4BAAQb,YAAYgB,OAAZ,CAAoBC,OAApB,CAA4BC,MAApC;AACAP,8BAAUN,IAAIU,KAAd;AACH,iBAHD,MAGO,IAAID,cAAc,SAAlB,EAA6B;AAChCD,4BAAQb,YAAYgB,OAAZ,CAAoBC,OAApB,CAA4BE,IAApC;AACAT,4BAAQL,IAAIU,KAAZ;AACH,iBAHM,MAGA,IAAIV,IAAIU,KAAJ,YAAqBK,MAAzB,EAAiC;AACpCP,4BAAQb,YAAYgB,OAAZ,CAAoBC,OAApB,CAA4BI,MAApC;AACAZ,8BAAUJ,IAAIU,KAAd;AACH,iBAHM,MAGA,IAAID,cAAc,QAAlB,EAA4B;AAC/BD,4BAAQb,YAAYgB,OAAZ,CAAoBC,OAApB,CAA4BK,MAApC;AACAV,2BAAOW,KAAKC,SAAL,CAAenB,IAAIU,KAAnB,CAAP;AACH,iBAHM,MAGA;AACHF,4BAAQb,YAAYgB,OAAZ,CAAoBC,OAApB,CAA4BK,MAApC;AACA,wBAAIR,cAAc,QAAlB,EAA4B;AACxBF,+BAAOP,IAAIU,KAAX;AACH,qBAFD,MAEO;AACHH,+BAAOa,OAAOpB,IAAIU,KAAX,CAAP;AACH;AACJ;;AAEDb,2BAAWwB,IAAX,CAAgB;AACZpB,yBAAKA,GADO;AAEZO,2BAAOA,KAFK;AAGZD,0BAAMA,IAHM;AAIZD,6BAASA,OAJG;AAKZD,2BAAOA,KALK;AAMZH,2BAAOA,KANK;AAOZE,6BAASA;AAPG,iBAAhB;AASH;;AAED,mBAAOP,UAAP;AACH;;;sCAEoByB,I,EAAkC;AACnD,gBAAIC,aAAa,EAAjB;AACA,iBAAK,IAAIzB,IAAI,CAAb,EAAgBA,IAAIwB,KAAKvB,MAAzB,EAAiCD,GAAjC,EAAsC;AAClC,oBAAI0B,MAAMF,KAAKxB,CAAL,CAAV;AACAyB,2BAAWF,IAAX,CAAgB;AACZ,iCAAa,eAAMI,WAAN,CAAkBD,IAAIE,SAAJ,GAAgB,IAAlC,CADD,EAC0C;AACtD,8BAAU/B,YAAYgC,aAAZ,CAA0BH,IAAII,MAA9B;AAFE,iBAAhB;AAIH;;AAED,mBAAOL,UAAP;AACH;;;6CAE2BM,I,EAAoC;AAC5D,gBAAIC,aAAa,EAAjB;AACA,iBAAK,IAAIhC,IAAI,CAAb,EAAgBA,IAAI+B,KAAK9B,MAAzB,EAAiCD,GAAjC,EAAsC;AAClC,oBAAIiC,gBAAJ;AACA,oBAAIC,MAAMH,KAAK/B,CAAL,CAAV;AACA,oBAAImC,UAAUJ,KAAK/B,CAAL,EAAQoC,iBAAR,EAAd;;AAEA,oBAAIF,IAAIG,IAAJ,OAAe,sBAAYC,kBAA/B,EAAmD;AAC/CL,8BAAUpC,YAAYgB,OAAZ,CAAoB0B,WAApB,CAAgCC,QAA1C;AACH,iBAFD,MAEO,IAAIN,IAAIG,IAAJ,OAAe,sBAAYI,sBAA/B,EAAuD;AAC1DR,8BAAUpC,YAAYgB,OAAZ,CAAoB0B,WAApB,CAAgCG,YAA1C;AACH,iBAFM,MAEA;AACH;AACH;;AAEDV,2BAAWT,IAAX,CAAgB;AACZoB,6BAASV,OADG;AAEZW,gCAAYT,QAAQU,OAFR;AAGZC,iCAAajD,YAAYQ,WAHb;AAIZ0C,4BAAQZ,QAAQY;AAJJ,iBAAhB;AAMH;;AAED,mBAAOf,UAAP;AACH;;;qCAEmBgB,I,EAAiB;AACjC,gBAAIC,OAAOpD,YAAYgC,aAAZ,CAA0BmB,KAAKE,KAA/B,CAAX;AACA,gBAAI1B,OAAO3B,YAAYsD,aAAZ,CAA0BH,KAAKI,KAA/B,CAAX;AACA,gBAAIC,WAAW,IAAf;;AAEA,mBAAO;AACHT,4BAAYI,KAAKM,YAAL,CAAkBT,OAD3B;AAEHC,6BAAajD,YAAYQ,WAFtB,EAEoC;AACvC0C,wBAAQC,KAAKM,YAAL,CAAkBP,MAHvB;AAIHQ,8BAAcP,KAAKM,YAAL,CAAkBE,QAAlB,IAA8B3D,YAAYQ,WAJrD;AAKHoD,+BAAeT,KAAKU,cALjB;AAMHC,4BAAY9D,YAAY+D,oBAAZ,CAAiCZ,KAAKa,WAAtC,CANT;AAOHC,uBAAOd,KAAKM,YAAL,CAAkBQ,KAPtB;AAQHC,2BAAW,eAAMpC,WAAN,CAAkBqB,KAAKgB,UAAL,GAAkB,IAApC,CARR,EAQmD;AACtDC,0BAAU,eAAMtC,WAAN,CAAkBqB,KAAKkB,SAAL,GAAiB,IAAnC,CATP,EASiD;AACpDjB,sBAAMA,IAVH;AAWHzB,sBAAMA;AAXH,aAAP;AAaH;;;;;;AAlHgB3B,W,CACVgB,O,GAAU,qBAAW;AACxBsD,YAAQ,aAAGC,YAAH,CAAgB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,mCAArB,CAAhB,EAA2E,OAA3E,CADgB;AAExBC,4BAAwB;AAFA,CAAX,C;AADA1E,W,CAKVQ,W,GAAqB,IAAIY,MAAJ,CAAW,CAAC,CAAD,EAAI,CAAJ,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAX,C;kBALXpB,W","file":"thrift.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport fs from 'fs';\nimport opentracing from 'opentracing';\nimport path from 'path';\nimport {Thrift} from 'thriftrw';\nimport Utils from './util.js';\n\nexport default class ThriftUtils {\n    static _thrift = new Thrift({\n        source: fs.readFileSync(path.join(__dirname, './jaeger-idl/thrift/jaeger.thrift'), 'ascii'),\n        allowOptionalArguments: true\n    });\n    static emptyBuffer: Buffer =new Buffer([0, 0 , 0, 0, 0, 0, 0, 0]);\n\n    static getThriftTags(initialTags: Array<Tag>): Array<any> {\n        let thriftTags = [];\n        for (let i = 0; i < initialTags.length; i++) {\n            let tag = initialTags[i];\n\n            let key: string = tag.key;\n\n            let vLong: Buffer = ThriftUtils.emptyBuffer;\n            let vBinary: Buffer = ThriftUtils.emptyBuffer;\n            let vBool: boolean = false;\n            let vDouble: number = 0;\n            let vStr: string = '';\n\n            let vType: string = '';\n            let valueType = typeof(tag.value);\n            if (valueType === 'number') {\n                vType = ThriftUtils._thrift.TagType.DOUBLE;\n                vDouble = tag.value;\n            } else if (valueType === 'boolean') {\n                vType = ThriftUtils._thrift.TagType.BOOL;\n                vBool = tag.value;\n            } else if (tag.value instanceof Buffer) {\n                vType = ThriftUtils._thrift.TagType.BINARY;\n                vBinary = tag.value;\n            } else if (valueType === 'object') {\n                vType = ThriftUtils._thrift.TagType.STRING;\n                vStr = JSON.stringify(tag.value);\n            } else {\n                vType = ThriftUtils._thrift.TagType.STRING;\n                if (valueType === 'string') {\n                    vStr = tag.value;\n                } else {\n                    vStr = String(tag.value);\n                }\n            }\n\n            thriftTags.push({\n                key: key,\n                vType: vType,\n                vStr: vStr,\n                vDouble: vDouble,\n                vBool: vBool,\n                vLong: vLong,\n                vBinary: vBinary\n            });\n        }\n\n        return thriftTags;\n    }\n\n    static getThriftLogs(logs: Array<LogData>): Array<any> {\n        let thriftLogs = [];\n        for (let i = 0; i < logs.length; i++) {\n            let log = logs[i];\n            thriftLogs.push({\n                'timestamp': Utils.encodeInt64(log.timestamp * 1000), // to microseconds\n                'fields': ThriftUtils.getThriftTags(log.fields)\n            });\n        }\n\n        return thriftLogs;\n    }\n\n    static spanRefsToThriftRefs(refs: Array<Reference>): Array<any> {\n        let thriftRefs = [];\n        for (let i = 0; i < refs.length; i++) {\n            let refEnum;\n            let ref = refs[i];\n            let context = refs[i].referencedContext();\n\n            if (ref.type() === opentracing.REFERENCE_CHILD_OF) {\n                refEnum = ThriftUtils._thrift.SpanRefType.CHILD_OF;\n            } else if (ref.type() === opentracing.REFERENCE_FOLLOWS_FROM) {\n                refEnum = ThriftUtils._thrift.SpanRefType.FOLLOWS_FROM\n            } else {\n                continue;\n            }\n\n            thriftRefs.push({\n                refType: refEnum,\n                traceIdLow: context.traceId,\n                traceIdHigh: ThriftUtils.emptyBuffer,\n                spanId: context.spanId\n            });\n        }\n\n        return thriftRefs;\n    }\n\n    static spanToThrift(span: Span): any {\n        let tags = ThriftUtils.getThriftTags(span._tags);\n        let logs = ThriftUtils.getThriftLogs(span._logs);\n        let unsigned = true;\n\n        return {\n            traceIdLow: span._spanContext.traceId,\n            traceIdHigh: ThriftUtils.emptyBuffer,  // TODO(oibe) implement 128 bit ids\n            spanId: span._spanContext.spanId,\n            parentSpanId: span._spanContext.parentId || ThriftUtils.emptyBuffer,\n            operationName: span._operationName,\n            references: ThriftUtils.spanRefsToThriftRefs(span._references),\n            flags: span._spanContext.flags,\n            startTime: Utils.encodeInt64(span._startTime * 1000), // to microseconds\n            duration: Utils.encodeInt64(span._duration * 1000), // to microseconds\n            tags: tags,\n            logs: logs\n        }\n    }\n}\n"]}