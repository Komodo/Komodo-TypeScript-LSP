{"version":3,"sources":["../../../crossdock/test/endtoend_handler.js"],"names":["PORT","HOST","describe","server","thrift","beforeEach","createSocket","bind","entryPoint","join","__dirname","allowOptionalArguments","allowFilesystemAccess","handler","port","host","app","use","json","post","req","res","generateTraces","listen","afterEach","close","it","done","traceRequest","operation","count","tags","headers","JSON","stringify","err","response","thriftTagsToObject","span","value","forEach","tag","vType","vStr","vDouble","vBool","vLong","vBinary","push","key","on","address","msg","remote","thriftObj","Agent","emitBatch","argumentsMessageRW","readFrom","batch","body","equal","spans","length","_tags","operationName","isOk","hasTags"],"mappings":"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","file":"endtoend_handler.js","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport {assert} from 'chai';\nimport dgram from 'dgram';\nimport fs from 'fs';\nimport EndToEndHandler from '../src/endtoend_handler';\nimport path from 'path';\nimport request from 'request';\nimport JaegerTestUtils from '../../src/test_util';\nimport {Thrift} from 'thriftrw';\nimport bodyParser from 'body-parser';\nimport express from 'express';\n\nconst PORT = 6832;\nconst HOST = '127.0.0.1';\n\ndescribe('Endtoend Handler should', () => {\n    let server;\n    let thrift;\n\n    beforeEach(() => {\n        server = dgram.createSocket('udp4');\n        server.bind(PORT, HOST);\n        thrift = new Thrift({\n            entryPoint: path.join(__dirname, '../../src/thriftrw-idl/agent.thrift'),\n            allowOptionalArguments: true,\n            allowFilesystemAccess: true\n        });\n\n        let handler = new EndToEndHandler({port: PORT, host: HOST});\n        let app = express();\n        app.use(bodyParser.json());\n        app.post('/create_traces', (req, res) => {\n            handler.generateTraces(req, res);\n        });\n\n        app.listen(8083, () => {});\n    });\n\n    afterEach(() => {\n        server.close();\n    });\n\n    it ('report spans to local server', (done) => {\n        let traceRequest = {\n            operation: 'leela',\n            count: 5,\n            tags: { 'key': 'value'}\n        };\n\n        let headers = {'Content-Type': 'application/json'};\n        request.post({\n            'url': 'http://127.0.0.1:8083/create_traces',\n            'forever': true,\n            'headers': headers,\n            'body': JSON.stringify(traceRequest)\n        }, (err, response) => {});\n\n        function thriftTagsToObject(span: Span) {\n            let tags = [];\n            let value;\n            span.tags.forEach((tag) => {\n                if (tag.vType === 'STRING') {\n                    value = tag.vStr;\n                } else if (tag.vType === 'DOUBLE') {\n                    value = tag.vDouble;\n                } else if (tag.vType === 'BOOL') {\n                    value = tag.vBool;\n                } else if (tag.vType === 'LONG') {\n                    value = tag.vLong;\n                } else {\n                    value = tag.vBinary;\n                }\n\n                tags.push({key: tag.key,  value: value});\n            });\n            return tags;\n        }\n        server.on('listening', function () {\n            let address = server.address();\n        });\n        server.on('message', function(msg, remote) {\n            let thriftObj = thrift.Agent.emitBatch.argumentsMessageRW.readFrom(msg, 0);\n            let batch = thriftObj.value.body.batch;\n\n            assert.equal(batch.spans.length, 5);\n\n            batch.spans.forEach((span) => {\n                span._tags = thriftTagsToObject(span);\n                assert.equal(span.operationName, 'leela');\n                assert.isOk(JaegerTestUtils.hasTags(span, {\n                    'key': 'value'\n                }));\n            });\n            done();\n        });\n    });\n});\n"]}