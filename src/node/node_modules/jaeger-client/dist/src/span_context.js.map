{"version":3,"sources":["../../src/span_context.js"],"names":["constants","SpanContext","traceId","spanId","parentId","traceIdStr","spanIdStr","parentIdStr","flags","baggage","debugId","samplingFinalized","_traceId","_spanId","_parentId","_traceIdStr","_spanIdStr","_parentIdStr","_flags","_baggage","_debugId","_samplingFinalized","isValid","SAMPLED_MASK","DEBUG_MASK","key","value","newBaggage","clone","toString","join","encodeInt64","removeLeadingZeros","serializedString","headers","split","length","approxTraceId","parseInt","NaNDetected","isNaN","withStringIds"],"mappings":"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","file":"span_context.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport * as constants from './constants.js';\nimport Utils from './util.js';\n\nexport default class SpanContext {\n    _traceId: any;\n    _spanId: any;\n    _parentId: any;\n    _traceIdStr: ?string;\n    _spanIdStr: ?string;\n    _parentIdStr: ?string;\n    _flags: number;\n    _baggage: any;\n    _debugId: ?string;\n    /**\n     * This field exists to help distinguish between when a span can have a properly\n     * correlated operation name -> sampling rate mapping, and when it cannot.\n     * Adaptive sampling uses the operation name of a span to correlate it with\n     * a sampling rate.  If an operation name is set on a span after the span's creation\n     * then adaptive sampling cannot associate the operation name with the proper sampling rate.\n     * In order to correct this we allow a span to be written to, so that we can re-sample\n     * it in the case that an operation name is set after span creation. Situations \n     * where a span context's sampling decision is finalized include:\n     * - it has inherited the sampling decision from its parent\n     * - its debug flag is set via the sampling.priority tag\n     * - it is finish()-ed\n     * - setOperationName is called\n     * - it is used as a parent for another span\n     * - its context is serialized using injectors\n     * */\n    _samplingFinalized: boolean;\n\n    constructor(traceId: any,\n                spanId: any,\n                parentId: any,\n                traceIdStr: ?string,\n                spanIdStr: ?string,\n                parentIdStr: ?string,\n                flags: number = 0,\n                baggage: any = {},\n                debugId: ?string = '',\n                samplingFinalized: boolean = false) {\n        this._traceId = traceId;\n        this._spanId = spanId;\n        this._parentId = parentId;\n        this._traceIdStr = traceIdStr;\n        this._spanIdStr = spanIdStr;\n        this._parentIdStr = parentIdStr;\n        this._flags = flags;\n        this._baggage = baggage;\n        this._debugId = debugId;\n        this._samplingFinalized = samplingFinalized;\n    }\n\n    get traceId(): any {\n        if (this._traceId == null && this._traceIdStr != null) {\n            this._traceId = Utils.encodeInt64(this._traceIdStr);\n        }\n        return this._traceId;\n    }\n\n    get spanId(): any {\n        if (this._spanId == null && this._spanIdStr != null) {\n            this._spanId = Utils.encodeInt64(this._spanIdStr);\n        }\n        return this._spanId;\n    }\n\n    get parentId(): any {\n        if (this._parentId == null && this._parentIdStr != null) {\n            this._parentId = Utils.encodeInt64(this._parentIdStr);\n        }\n        return this._parentId;\n    }\n\n    get traceIdStr(): ?string {\n        if (this._traceIdStr == null && this._traceId != null) {\n            this._traceIdStr = Utils.removeLeadingZeros(this._traceId.toString('hex'));\n        }\n        return this._traceIdStr;\n    }\n\n    get spanIdStr(): ?string {\n        if (this._spanIdStr == null && this._spanId != null) {\n            this._spanIdStr = Utils.removeLeadingZeros(this._spanId.toString('hex'));\n        }\n        return this._spanIdStr;\n    }\n\n    get parentIdStr(): ?string {\n        if (this._parentIdStr == null && this._parentId != null) {\n            this._parentIdStr = Utils.removeLeadingZeros(this._parentId.toString('hex'));\n        }\n        return this._parentIdStr;\n    }\n\n    get flags(): number {\n        return this._flags;\n    }\n\n    get baggage(): any {\n        return this._baggage;\n    }\n\n    get debugId(): ?string {\n        return this._debugId;\n    }\n\n    get samplingFinalized(): boolean {\n        return this._samplingFinalized;\n    }\n\n    set traceId(traceId: Buffer): void {\n        this._traceId = traceId;\n        this._traceIdStr = null;\n    }\n\n    set spanId(spanId: Buffer): void {\n        this._spanId = spanId;\n        this._spanIdStr = null;\n    }\n\n    set parentId(parentId: Buffer): void {\n        this._parentId = parentId;\n        this._parentIdStr = null;\n    }\n\n    set flags(flags: number): void {\n        this._flags = flags;\n    }\n\n    set baggage(baggage: any): void {\n        this._baggage = baggage;\n    }\n\n    set debugId(debugId: ?string): void {\n        this._debugId = debugId;\n    }\n\n    get isValid(): boolean {\n        return !!((this._traceId || this._traceIdStr) && (this._spanId || this._spanIdStr));\n    }\n\n    finalizeSampling(): void {\n        this._samplingFinalized = true;\n    }\n\n    isDebugIDContainerOnly(): boolean {\n        return !this.isValid && this._debugId !== '';\n    }\n\n    /**\n     * @return {boolean} - returns whether or not this span context was sampled.\n     **/\n    isSampled(): boolean {\n        return (this.flags & constants.SAMPLED_MASK) === constants.SAMPLED_MASK;\n    }\n\n    /**\n     * @return {boolean} - returns whether or not this span context has a debug flag set.\n     **/\n    isDebug(): boolean {\n        return (this.flags & constants.DEBUG_MASK) === constants.DEBUG_MASK;\n    }\n\n    withBaggageItem(key: string, value: string): SpanContext {\n        let newBaggage = Utils.clone(this._baggage);\n        newBaggage[key] = value;\n        return new SpanContext(\n            this._traceId,\n            this._spanId,\n            this._parentId,\n            this._traceIdStr,\n            this._spanIdStr,\n            this._parentIdStr,\n            this._flags,\n            newBaggage,\n            this._debugId,\n            this._samplingFinalized\n            );\n    }\n\n    /**\n     * @return {string} - returns a string version of this span context.\n     **/\n    toString(): string {\n        return [\n            this.traceIdStr,\n            this.spanIdStr,\n            this.parentIdStr || \"0\",\n            this._flags.toString(16)\n        ].join(':');\n    }\n\n    /**\n     * @param {string} serializedString - a serialized span context.\n     * @return {SpanContext} - returns a span context represented by the serializedString.\n     **/\n    static fromString(serializedString: string): any {\n        let headers:  any = serializedString.split(':');\n        if (headers.length !== 4) {\n            return null;\n        }\n\n        // Note: Number type in JS cannot represent the full range of 64bit unsigned ints,\n        // so using parseInt() on strings representing 64bit hex numbers only returns\n        // an approximation of the actual value. Fortunately, we do not depend on the\n        // returned value, we are only using it to validate that the string is\n        // a valid hex number (which is faster than doing it manually).  We cannot use\n        // Int64(numberValue).toBuffer() because it throws exceptions on bad strings.\n        let approxTraceId = parseInt(headers[0], 16);\n        let NaNDetected = (isNaN(approxTraceId, 16) || approxTraceId === 0) ||\n                          isNaN(parseInt(headers[1], 16)) ||\n                          isNaN(parseInt(headers[2], 16)) ||\n                          isNaN(parseInt(headers[3], 16));\n\n        if (NaNDetected) {\n            return null;\n        }\n\n        let parentId = null;\n        if (headers[2] !== '0') {\n            parentId = headers[2];\n        }\n\n        return SpanContext.withStringIds(\n            headers[0],\n            headers[1],\n            parentId,\n            parseInt(headers[3], 16)\n        );\n    }\n\n    static withBinaryIds(traceId: any,\n                         spanId: any,\n                         parentId: any,\n                         flags: number,\n                         baggage: any = {},\n                         debugId: ?string = '') : SpanContext {\n        return new SpanContext(\n            traceId,\n            spanId,\n            parentId,\n            null, // traceIdStr: string,\n            null, // spanIdStr: string,\n            null, // parentIdStr: string,\n            flags,\n            baggage,\n            debugId\n        );\n    }\n\n    static withStringIds(traceIdStr: any,\n                         spanIdStr: any,\n                         parentIdStr: any,\n                         flags: number,\n                         baggage: any = {},\n                         debugId: ?string = '') : SpanContext {\n        return new SpanContext(\n            null, // traceId,\n            null, // spanId,\n            null, // parentId,\n            traceIdStr,\n            spanIdStr,\n            parentIdStr,\n            flags,\n            baggage,\n            debugId\n        );\n    }\n}\n"]}