{"version":3,"sources":["../../test/all_reporters.js"],"names":["describe","reporters","beforeEach","loggingReporter","inMemoryReporter","setProcess","noopReporter","sender","_process","remoteReporter","it","compositeReporter","equal","name","closeOptions","callback","spy","predicate","calledOnce","each","o","reporter","close","isOk","logger","spanMock","context","toString","report","_infoMsgs","mockReporter"],"mappings":"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","file":"all_reporters.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport { assert } from 'chai';\nimport CompositeReporter from '../src/reporters/composite_reporter';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter';\nimport NoopReporter from '../src/reporters/noop_reporter';\nimport RemoteReporter from '../src/reporters/remote_reporter';\nimport UDPSender from '../src/reporters/udp_sender';\nimport MockLogger from './lib/mock_logger';\nimport LoggingReporter from '../src/reporters/logging_reporter';\nimport sinon from 'sinon';\n\ndescribe('All Reporters should', () => {\n    let reporters;\n    beforeEach(() => {\n        let loggingReporter = new LoggingReporter();\n        let inMemoryReporter = new InMemoryReporter();\n        inMemoryReporter.setProcess('service-name', []);\n        let noopReporter = new NoopReporter();\n        let sender = new UDPSender();\n        sender.setProcess(inMemoryReporter._process);\n        let remoteReporter = new RemoteReporter(sender);\n        reporters = [\n            loggingReporter,\n            inMemoryReporter,\n            noopReporter,\n            remoteReporter\n        ];\n    });\n\n    it ('have proper names', () => {\n        let loggingReporter = new LoggingReporter();\n        let inMemoryReporter = new InMemoryReporter();\n        inMemoryReporter.setProcess('service-name', []);\n        let noopReporter = new NoopReporter();\n        let remoteReporter = new RemoteReporter(new UDPSender());\n        let compositeReporter = new CompositeReporter();\n\n        assert.equal(loggingReporter.name(), 'LoggingReporter');\n        assert.equal(inMemoryReporter.name(), 'InMemoryReporter');\n        assert.equal(noopReporter.name(), 'NoopReporter');\n        assert.equal(remoteReporter.name(), 'RemoteReporter');\n        assert.equal(compositeReporter.name(), 'CompositeReporter');\n    });\n\n    let closeOptions = [\n        { callback: sinon.spy(), predicate: (spy) => { return spy.calledOnce === true; }},\n        { callback: null, predicate: (spy) => { return true; }}\n    ];\n\n    _.each(closeOptions, (o) => {\n        it ('calls to close execute callback correctly', () => {\n            let reporter = new CompositeReporter(reporters);\n\n            reporter.close(o.callback);\n\n            assert.isOk(o.predicate(o.callback));\n        });\n    });\n\n    describe('Logging reporter', () => {\n        it('logs span as context().toString()', () => {\n            let logger = new MockLogger();\n            let reporter = new LoggingReporter(logger);\n            let spanMock = {\n                context: function context() {\n                    return {\n                        toString: function toString() {\n                            return \"span-as-string\";\n                        }\n                    };\n                }\n            };\n\n            reporter.report(spanMock);\n\n            assert.equal(logger._infoMsgs[0], 'Reporting span span-as-string');\n        });\n    });\n\n    describe('Composite reporter', () => {\n        it ('should report spans', () => {\n            let mockReporter = {\n                report: sinon.spy()\n            };\n            let reporter = new CompositeReporter([mockReporter]);\n            reporter.report();\n\n            assert.isOk(mockReporter.report.calledOnce);\n        });\n    });\n});\n"]}