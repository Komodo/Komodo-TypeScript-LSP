{"version":3,"sources":["../../../src/samplers/ratelimiting_sampler.js"],"names":["constants","RateLimitingSampler","maxTracesPerSecond","initBalance","_init","prevMaxTracesPerSecond","_maxTracesPerSecond","Error","maxBalance","_rateLimiter","update","name","operation","tags","decision","checkCredit","SAMPLER_TYPE_TAG_KEY","SAMPLER_TYPE_RATE_LIMITING","SAMPLER_PARAM_TAG_KEY","other","callback"],"mappings":";;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;IAAYA,S;;AACZ;;;;;;;;;;IAEqBC,mB;AAIjB,iCAAYC,kBAAZ,EAAwCC,WAAxC,EAA8D;AAAA;;AAC1D,aAAKC,KAAL,CAAWF,kBAAX,EAA+BC,WAA/B;AACH;;;;+BAEMD,kB,EAAqC;AACxC,gBAAIG,yBAAyB,KAAKC,mBAAlC;AACA,iBAAKF,KAAL,CAAWF,kBAAX;AACA,mBAAO,KAAKI,mBAAL,KAA6BD,sBAApC;AACH;;;8BAEKH,kB,EAA4BC,W,EAAsB;AACpD,gBAAID,qBAAqB,CAAzB,EAA4B;AACxB,sBAAM,IAAIK,KAAJ,6DAAoEL,kBAApE,CAAN;AACH;AACD,gBAAIM,aAAaN,qBAAqB,GAArB,GAA2B,GAA3B,GAAiCA,kBAAlD;;AAEA,iBAAKI,mBAAL,GAA2BJ,kBAA3B;AACA,gBAAI,KAAKO,YAAT,EAAuB;AACnB,qBAAKA,YAAL,CAAkBC,MAAlB,CAAyBR,kBAAzB,EAA6CM,UAA7C;AACH,aAFD,MAEO;AACH,qBAAKC,YAAL,GAAoB,2BAAgBP,kBAAhB,EAAoCM,UAApC,EAAgDL,WAAhD,CAApB;AACH;AACJ;;;+BAEc;AACX,mBAAO,qBAAP;AACH;;;mCAEkB;AACf,mBAAU,KAAKQ,IAAL,EAAV,4BAA4C,KAAKL,mBAAjD;AACH;;;kCAMSM,S,EAAmBC,I,EAAoB;AAC7C,gBAAIC,WAAW,KAAKL,YAAL,CAAkBM,WAAlB,CAA8B,GAA9B,CAAf;AACA,gBAAID,QAAJ,EAAc;AACVD,qBAAKb,UAAUgB,oBAAf,IAAuChB,UAAUiB,0BAAjD;AACAJ,qBAAKb,UAAUkB,qBAAf,IAAwC,KAAKZ,mBAA7C;AACH;AACD,mBAAOQ,QAAP;AACH;;;8BAEKK,K,EAAyB;AAC3B,gBAAI,EAAEA,iBAAiBlB,mBAAnB,CAAJ,EAA6C;AACzC,uBAAO,KAAP;AACH;;AAED,mBAAO,KAAKC,kBAAL,KAA4BiB,MAAMjB,kBAAzC;AACH;;;8BAEKkB,Q,EAA2B;AAC7B,gBAAIA,QAAJ,EAAc;AACVA;AACH;AACJ;;;4BAzBgC;AAC7B,mBAAO,KAAKd,mBAAZ;AACH;;;;;;kBAtCgBL,mB","file":"ratelimiting_sampler.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport * as constants from '../constants.js';\nimport RateLimiter from '../rate_limiter.js';\n\nexport default class RateLimitingSampler {\n    _rateLimiter: RateLimiter;\n    _maxTracesPerSecond: number;\n\n    constructor(maxTracesPerSecond: number, initBalance: ?number) {\n        this._init(maxTracesPerSecond, initBalance);\n    }\n\n    update(maxTracesPerSecond: number): boolean {\n        let prevMaxTracesPerSecond = this._maxTracesPerSecond;\n        this._init(maxTracesPerSecond);\n        return this._maxTracesPerSecond !== prevMaxTracesPerSecond;\n    }\n\n    _init(maxTracesPerSecond: number, initBalance: ?number) {\n        if (maxTracesPerSecond < 0) {\n            throw new Error(`maxTracesPerSecond must be greater than 0.0.  Received ${maxTracesPerSecond}`);\n        }\n        let maxBalance = maxTracesPerSecond < 1.0 ? 1.0 : maxTracesPerSecond;\n\n        this._maxTracesPerSecond = maxTracesPerSecond;\n        if (this._rateLimiter) {\n            this._rateLimiter.update(maxTracesPerSecond, maxBalance);\n        } else {\n            this._rateLimiter = new RateLimiter(maxTracesPerSecond, maxBalance, initBalance);\n        }\n    }\n\n    name(): string {\n        return 'RateLimitingSampler';\n    }\n\n    toString(): string {\n        return `${this.name()}(maxTracesPerSecond=${this._maxTracesPerSecond})`;\n    }\n\n    get maxTracesPerSecond(): number {\n        return this._maxTracesPerSecond;\n    }\n\n    isSampled(operation: string, tags: any): boolean {\n        let decision = this._rateLimiter.checkCredit(1.0);\n        if (decision) {\n            tags[constants.SAMPLER_TYPE_TAG_KEY] = constants.SAMPLER_TYPE_RATE_LIMITING;\n            tags[constants.SAMPLER_PARAM_TAG_KEY] = this._maxTracesPerSecond;\n        }\n        return decision;\n    }\n\n    equal(other: Sampler): boolean {\n        if (!(other instanceof RateLimitingSampler)) {\n            return false;\n        }\n\n        return this.maxTracesPerSecond === other.maxTracesPerSecond;\n    }\n\n    close(callback: ?Function): void {\n        if (callback) {\n            callback();\n        }\n    }\n}\n"]}