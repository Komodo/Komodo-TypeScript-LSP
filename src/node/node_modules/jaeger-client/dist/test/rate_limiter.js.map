{"version":3,"sources":["../../test/rate_limiter.js"],"names":["describe","it","initialDate","Date","getTime","clock","useFakeTimers","limiter","i","equal","checkCredit","restore","limit","cost","_balance","update"],"mappings":";;AAYA;;AACA;;;;AACA;;;;;;AAEAA,SAAU,iCAAV,EAA6C,YAAM;AAC/CC,OAAG,8BAAH,EAAmC,YAAM;AACrC,YAAIC,cAAc,IAAIC,IAAJ,CAAS,IAAT,EAAc,CAAd,EAAgB,CAAhB,EAAmBC,OAAnB,EAAlB;AACA,YAAIC,QAAQ,gBAAMC,aAAN,CAAoBJ,WAApB,CAAZ;AACA,YAAIK,UAAU,2BAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,CAAd;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EAA6B;AACzB,yBAAOC,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,IAArC,EAA2C,iCAA3C;AACH;AACD,qBAAOD,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,KAArC,EAA4C,kCAA5C;;AAEAL,cAAMM,OAAN;AACAN,gBAAQ,gBAAMC,aAAN,CAAoBJ,cAAc,IAAlC,CAAR;AACA,aAAK,IAAIM,KAAI,CAAb,EAAgBA,KAAI,EAApB,EAAwBA,IAAxB,EAA6B;AACzB,yBAAOC,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,IAArC,EAA2C,iCAA3C;AACH;AACD,qBAAOD,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,KAArC,EAA4C,kCAA5C;AACAL,cAAMM,OAAN;AACH,KAhBD;;AAkBAV,OAAG,4BAAH,EAAiC,YAAM;AACnC,YAAIC,cAAc,IAAIC,IAAJ,CAAS,IAAT,EAAc,CAAd,EAAgB,CAAhB,EAAmBC,OAAnB,EAAlB;AACA,YAAIC,QAAQ,gBAAMC,aAAN,CAAoBJ,WAApB,CAAZ;AACA,YAAIU,QAAQ,GAAZ;AACA,YAAIC,OAAO,IAAID,KAAf;AACA,YAAIL,UAAU,2BAAgB,CAAhB,EAAmB,CAAnB,CAAd;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAII,KAApB,EAA2BJ,GAA3B,EAAgC;AAC5BD,oBAAQG,WAAR,CAAoBG,IAApB;AACH;;AAED,qBAAOJ,KAAP,CAAaF,QAAQG,WAAR,CAAoBG,IAApB,CAAb,EAAwC,KAAxC,EAA+C,kCAA/C;;AAEAR,cAAMM,OAAN;AACAN,gBAAQ,gBAAMC,aAAN,CAAoBJ,cAAc,IAAlC,CAAR;AACA,qBAAOO,KAAP,CAAaF,QAAQG,WAAR,CAAoBG,IAApB,CAAb,EAAwC,IAAxC,EAA8C,iCAA9C;AACAR,cAAMM,OAAN;AACH,KAhBD;;AAkBAV,OAAG,2CAAH,EAAgD,YAAM;AAClD,YAAIC,cAAc,IAAIC,IAAJ,CAAS,IAAT,EAAc,CAAd,EAAgB,CAAhB,EAAmBC,OAAnB,EAAlB;AACA,YAAIC,QAAQ,gBAAMC,aAAN,CAAoBJ,WAApB,CAAZ;AACA,YAAIK,UAAU,2BAAgB,GAAhB,EAAqB,CAArB,EAAwB,CAAxB,CAAd;AACA,qBAAOE,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,IAArC,EAA2C,iCAA3C;;AAEAL,cAAMM,OAAN;AACA;AACAN,gBAAQ,gBAAMC,aAAN,CAAoBJ,cAAc,KAAlC,CAAR;AACA,qBAAOO,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,IAArC,EAA2C,iCAA3C;AACA,qBAAOD,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,KAArC,EAA4C,kCAA5C;AACAL,cAAMM,OAAN;AACH,KAZD;;AAcAV,OAAG,gBAAH,EAAqB,YAAM;AACvB,YAAIC,cAAc,IAAIC,IAAJ,CAAS,IAAT,EAAc,CAAd,EAAgB,CAAhB,EAAmBC,OAAnB,EAAlB;AACA,YAAIC,QAAQ,gBAAMC,aAAN,CAAoBJ,WAApB,CAAZ;AACA,YAAIK,UAAU,2BAAgB,GAAhB,EAAqB,CAArB,CAAd;AACA,qBAAOE,KAAP,CAAa,IAAb,EAAmBF,QAAQO,QAAR,IAAoB,CAApB,IAAyBP,QAAQO,QAAR,IAAoB,CAAhE;AACAP,gBAAQO,QAAR,GAAmB,GAAnB;AACA,qBAAOL,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,IAArC,EAA2C,iCAA3C;;AAEAH,gBAAQQ,MAAR,CAAe,GAAf,EAAoB,CAApB;AACAV,cAAMM,OAAN;AACA;AACAN,gBAAQ,gBAAMC,aAAN,CAAoBJ,cAAc,KAAlC,CAAR;AACA,qBAAOO,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,IAArC,EAA2C,iCAA3C;AACA,qBAAOD,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,IAArC,EAA2C,iCAA3C;AACA,qBAAOD,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,KAArC,EAA4C,kCAA5C;;AAEA;AACA;AACAL,gBAAQ,gBAAMC,aAAN,CAAoBJ,cAAc,KAAlC,CAAR;AACA,qBAAOO,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,IAArC,EAA2C,iCAA3C;AACA,qBAAOD,KAAP,CAAaF,QAAQO,QAArB,EAA+B,CAA/B,EAAkC,yCAAlC;;AAEA;AACAP,gBAAQQ,MAAR,CAAe,GAAf,EAAoB,CAApB;AACA,qBAAON,KAAP,CAAaF,QAAQO,QAArB,EAA+B,CAA/B,EAAkC,qCAAlC;AACA,qBAAOL,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,IAArC,EAA2C,iCAA3C;AACA,qBAAOD,KAAP,CAAaF,QAAQG,WAAR,CAAoB,CAApB,CAAb,EAAqC,KAArC,EAA4C,kCAA5C;AACAL,cAAMM,OAAN;AACH,KA5BD;AA6BH,CAhFD,E,CAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"rate_limiter.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport {assert} from 'chai';\nimport RateLimiter from '../src/rate_limiter';\nimport sinon from 'sinon';\n\ndescribe ('leaky bucket ratelimiter should', () => {\n    it('block after threshold is met', () => {\n        let initialDate = new Date(2011,9,1).getTime();\n        let clock = sinon.useFakeTimers(initialDate);\n        let limiter = new RateLimiter(10, 10, 10);\n        for (let i = 0; i < 10; i++) {\n            assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n        }\n        assert.equal(limiter.checkCredit(1), false, 'expected checkCredit to be false');\n\n        clock.restore();\n        clock = sinon.useFakeTimers(initialDate + 1000);\n        for (let i = 0; i < 10; i++) {\n            assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n        }\n        assert.equal(limiter.checkCredit(1), false, 'expected checkCredit to be false');\n        clock.restore();\n    });\n\n    it('work for fractional values', () => {\n        let initialDate = new Date(2011,9,1).getTime();\n        let clock = sinon.useFakeTimers(initialDate);\n        let limit = 500;\n        let cost = 1 / limit;\n        let limiter = new RateLimiter(1, 1);\n        for (let i = 0; i < limit; i++) {\n            limiter.checkCredit(cost);\n        }\n\n        assert.equal(limiter.checkCredit(cost), false, 'expected checkCredit to be false');\n\n        clock.restore();\n        clock = sinon.useFakeTimers(initialDate + 1000);\n        assert.equal(limiter.checkCredit(cost), true, 'expected checkCredit to be true');\n        clock.restore();\n    });\n\n    it('work with creditsPerSecond smaller than 1', () => {\n        let initialDate = new Date(2011,9,1).getTime();\n        let clock = sinon.useFakeTimers(initialDate);\n        let limiter = new RateLimiter(0.1, 1, 1);\n        assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n\n        clock.restore();\n        // move time 20s forward, enough to accumulate credits for 2 messages, but it should still be capped at 1\n        clock = sinon.useFakeTimers(initialDate + 20000);\n        assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n        assert.equal(limiter.checkCredit(1), false, 'expected checkCredit to be false');\n        clock.restore();\n    });\n\n    it('update balance', () => {\n        let initialDate = new Date(2011,9,1).getTime();\n        let clock = sinon.useFakeTimers(initialDate);\n        let limiter = new RateLimiter(0.1, 1);\n        assert.equal(true, limiter._balance <= 1 && limiter._balance >= 0);\n        limiter._balance = 1.0;\n        assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n\n        limiter.update(0.1, 3);\n        clock.restore();\n        // move time 20s forward, enough to accumulate credits for 2 messages\n        clock = sinon.useFakeTimers(initialDate + 20000);\n        assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n        assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n        assert.equal(limiter.checkCredit(1), false, 'expected checkCredit to be false');\n\n        // move time 30s forward, enough to accumulate credits for another message (should have\n        // enough credits for 3 at this point)\n        clock = sinon.useFakeTimers(initialDate + 50000);\n        assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n        assert.equal(limiter._balance, 2, 'balance should be at 2 after spending 1');\n\n        // reduce the maxBalance so the limiter is capped at 1\n        limiter.update(0.1, 1);\n        assert.equal(limiter._balance, 1, 'balance should be at 1 after update');\n        assert.equal(limiter.checkCredit(1), true, 'expected checkCredit to be true');\n        assert.equal(limiter.checkCredit(1), false, 'expected checkCredit to be false');\n        clock.restore();\n    });\n});\n"]}