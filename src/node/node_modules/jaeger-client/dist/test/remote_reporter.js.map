{"version":3,"sources":["../../test/remote_reporter.js"],"names":["describe","tracer","reporter","sender","logger","metrics","beforeEach","e","console","log","stack","afterEach","clear","callback","close","it","span","startSpan","finish","equal","_batch","spans","length","flush","isOk","counterEquals","reporterSuccess","_maxSpanBytes","_errorMsgs","reporterDropped","setProcess","serviceName","tags","name","to","throw","mockSender","err","numSpans","_sender","reporterFailure"],"mappings":"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","file":"remote_reporter.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport {assert, expect} from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter';\nimport MockLogger from './lib/mock_logger';\nimport RemoteReporter from '../src/reporters/remote_reporter';\nimport Tracer from '../src/tracer';\nimport UDPSender from '../src/reporters/udp_sender';\nimport Metrics from '../src/metrics/metrics';\nimport LocalMetricFactory from './lib/metrics/local/metric_factory';\nimport LocalBackend from './lib/metrics/local/backend';\n\ndescribe('Composite and Remote Reporter should', () => {\n    let tracer;\n    let reporter;\n    let sender;\n    let logger;\n    let metrics;\n\n    beforeEach(() => {\n        try {\n            metrics = new Metrics(new LocalMetricFactory());\n            sender = new UDPSender();\n            logger = new MockLogger();\n            reporter = new RemoteReporter(sender, {\n                logger: logger,\n                metrics: metrics\n            });\n            tracer = new Tracer(\n                'test-service-name',\n                reporter,\n                new ConstSampler(true)\n            );\n        } catch (e) {\n            // this is useful to catch errors when thrift definition is changed\n            console.log('beforeEach failed', e);\n            console.log(e.stack);\n        }\n    });\n\n    afterEach(() => {\n        logger.clear();\n        let callback = () => {} // added for coverage reasons\n        reporter.close(callback);\n    });\n\n    it ('report span, and flush', () => {\n        let span = tracer.startSpan('operation-name');\n\n        // add duration to span, and report it\n        span.finish();\n        assert.equal(sender._batch.spans.length, 1);\n\n        reporter.flush();\n        assert.equal(sender._batch.spans.length, 0);\n        assert.isOk(LocalBackend.counterEquals(metrics.reporterSuccess, 1));\n    });\n\n    it ('report and flush span that is causes an error to be logged', () => {\n        // make it so that all spans will be too large to be appended\n        sender._maxSpanBytes = 1;\n\n        let span = tracer.startSpan('operation-name');\n\n        span.finish();\n        assert.equal(logger._errorMsgs[0], 'Failed to append spans in reporter.');\n\n        // metrics\n        assert.isOk(LocalBackend.counterEquals(metrics.reporterDropped, 1));\n    });\n\n    it ('should have coverage for simple code paths', () => {\n        let sender = new UDPSender();\n        sender.setProcess({\n            serviceName: 'service-name',\n            tags: []\n        });\n        let reporter = new RemoteReporter(sender);\n\n        assert.equal(reporter.name(), 'RemoteReporter');\n\n        reporter.close();\n    });\n\n    it ('should throw exception when initialized without a sender', () => {\n        expect(() => { new RemoteReporter(); }).to.throw('RemoteReporter must be given a Sender.');\n    });\n\n    it ('failed to flush spans with reporter', () => {\n        let mockSender = {\n            flush: () => {\n                return {\n                    err: true,\n                    numSpans: 1\n                };\n            },\n            close: () => {}\n        };\n\n        reporter._sender = mockSender;\n        reporter.flush();\n\n        assert.equal(logger._errorMsgs[0], 'Failed to flush spans in reporter.');\n        assert.isOk(LocalBackend.counterEquals(metrics.reporterFailure, 1));\n    });\n});\n"]}