{"version":3,"sources":["../../../crossdock/src/helpers.js"],"names":["constants","Helpers","tracer","_tracer","channel","makeSubChannel","serviceName","peers","myIp","crossdockSpec","readFileSync","join","__dirname","thriftChannel","source","bridge","_tracedChannel","tracedChannel","isStartRequest","traceRequest","serverSpan","setBaggageItem","BAGGAGE_KEY","baggage","sampled","setTag","Tags","SAMPLING_PRIORITY","prepareResponse","serverRole","downstream","Promise","resolve","reject","observedSpan","observeSpan","response","span","notImplementedError","log","json2str","callDownstream","then","downstreamResponse","transport","TRANSPORT_HTTP","callDownstreamHTTP","TRANSPORT_TCHANNEL","callDownstreamTChannel","TRANSPORT_DUMMY","port","parseInt","downstreamUrl","host","clientSpan","startSpan","childOf","context","headers","inject","FORMAT_HTTP_HEADERS","post","JSON","stringify","err","finish","parse","body","setSpan","request","timeout","cn","trace","retryFlags","never","joinTraceRequest","send","observed","traceId","traceIdStr","isSampled","getBaggageItem","process","env","NODE_ENV","args","console","apply","json"],"mappings":"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","file":"helpers.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport * as constants from './constants.js';\nimport fs from 'fs';\nimport path from 'path';\nimport dns from 'dns';\nimport DefaultContext from '../../src/default_context';\nimport opentracing from 'opentracing';\nimport request from 'request';\nimport RSVP from 'rsvp';\nimport Span from '../../src/span.js';\nimport SpanContext from '../../src/span_context.js';\nimport Tracer from '../../src/tracer.js';\nimport TChannel from 'tchannel/channel';\nimport TChannelThrift from 'tchannel/as/thrift';\nimport TChannelBridge from '../../src/tchannel_bridge';\nimport Utils from '../../src/util.js';\n\nexport default class Helpers {\n    _tracer: Tracer;\n    _bridge: TChannelBridge;\n    _tracedChannel: any;\n\n    constructor(tracer: Tracer) {\n        this._tracer = tracer;\n\n        var channel = TChannel().makeSubChannel({\n            serviceName: 'node',\n            peers: [Utils.myIp() + ':8082']\n        });\n\n        let crossdockSpec = fs.readFileSync(path.join(__dirname, '..', '..', 'src', 'jaeger-idl', 'thrift', 'crossdock', 'tracetest.thrift'), 'utf8');\n        let thriftChannel = TChannelThrift({\n            channel: channel,\n            source: crossdockSpec\n        });\n\n        let bridge = new TChannelBridge(this._tracer);\n        this._tracedChannel= bridge.tracedChannel(thriftChannel);\n    }\n\n    handleRequest(isStartRequest: boolean, traceRequest: any, serverSpan: Span): void {\n        if (isStartRequest) {\n            serverSpan.setBaggageItem(constants.BAGGAGE_KEY, traceRequest.baggage);\n            if (traceRequest.sampled) {\n                serverSpan.setTag(opentracing.Tags.SAMPLING_PRIORITY, 1);\n            }\n        }\n\n        // do async call to prepareResponse\n        return this.prepareResponse(traceRequest.serverRole, traceRequest.downstream, serverSpan);\n    }\n\n    prepareResponse(serverRole: string, downstream: Downstream, serverSpan: Span): any {\n        return new RSVP.Promise((resolve, reject) => {\n            let observedSpan = this.observeSpan(serverSpan);\n            let response: TraceResponse = {\n                span: observedSpan,\n                notImplementedError: ''\n            };\n            Helpers.log(serverRole, 'observed span', Helpers.json2str(observedSpan));\n\n            if (downstream) {\n                this.callDownstream(serverRole, downstream, serverSpan).then((downstreamResponse) => {\n                    response.downstream = downstreamResponse;\n                    Helpers.log(serverRole, 'returning response', Helpers.json2str(response));\n                    resolve(response);\n                });\n            } else {\n                Helpers.log(serverRole, 'returning response', Helpers.json2str(response));\n                resolve(response);\n            }\n\n        });\n    }\n\n    callDownstream(serverRole: string, downstream: Downstream, serverSpan: Span): any {\n        Helpers.log(serverRole, 'calling downstream', Helpers.json2str(downstream));\n        let transport = downstream.transport;\n        if (transport === constants.TRANSPORT_HTTP) {\n            return this.callDownstreamHTTP(downstream, serverSpan);\n        } else if (transport === constants.TRANSPORT_TCHANNEL) {\n            return this.callDownstreamTChannel(downstream, serverSpan);\n        } else if (transport == constants.TRANSPORT_DUMMY) {\n            return new RSVP.Promise((resolve, reject) => {\n                resolve({ 'notImplementedError': 'Dummy has not been implemented' });\n            });\n        } else {\n            return new RSVP.Promise((resolve, reject) => {\n                resolve({ 'notImplementedError': `Unrecognized transport received: ${transport}` })\n            });\n        }\n    }\n\n    callDownstreamHTTP(downstream: Downstream, serverSpan: Span): any {\n        return new RSVP.Promise((resolve, reject) => {\n\n            let port = parseInt(downstream.port);\n            let downstreamUrl = `http://${downstream.host}:${port}/join_trace`;\n\n            let clientSpan = this._tracer.startSpan('client-span', { childOf: serverSpan.context() });\n            let headers = { 'Content-Type': 'application/json' };\n            this._tracer.inject(clientSpan.context(), opentracing.FORMAT_HTTP_HEADERS, headers);\n\n            request.post({\n                'url': downstreamUrl,\n                'forever': true,\n                'headers': headers,\n                'body': JSON.stringify({\n                    'serverRole': downstream.serverRole,\n                    'downstream': downstream.downstream\n                })\n            }, (err, response) => {\n                if (err) {\n                    Helpers.log('error in downstream call:', err);\n                    clientSpan.finish();\n                    reject(err);\n                    return;\n                }\n\n                clientSpan.finish();\n                let downstreamResponse = JSON.parse(response.body);\n                resolve(downstreamResponse);\n            });\n        });\n    }\n\n    callDownstreamTChannel(downstream: Downstream, serverSpan: Span): any {\n        return new RSVP.Promise((resolve, reject) => {\n            let port = parseInt(downstream.port);\n            let downstreamUrl = `http://${downstream.host}:${port}/join_trace`;\n\n            let context = new DefaultContext();\n            context.setSpan(serverSpan);\n            let request = this._tracedChannel.request({\n                timeout: 5000,\n                context: context,\n                headers: {\n                    cn: 'tcollector-requestor'\n                },\n                trace: true,\n                serviceName: 'node',\n                retryFlags: {never: true}\n            });\n            let joinTraceRequest: JoinTraceRequest = {\n                'serverRole': downstream.serverRole,\n            };\n\n            if (downstream.downstream) {\n                joinTraceRequest.downstream = downstream.downstream;\n            }\n\n            request.send(\n                'TracedService::joinTrace',\n                null,\n                { request: joinTraceRequest },\n                (err, response) => {\n                    if (err) {\n                        Helpers.log('tchannel err', err);\n                        return;\n                    }\n                    resolve(response.body);\n            });\n        });\n    }\n\n    observeSpan(span: Span): ObservedSpan {\n        let observed: ObservedSpan = {\n            traceId: 'no span found',\n            sampled: false,\n            baggage: 'no span found'\n        };\n \n        if (span) {\n            observed = {\n                traceId: span.context().traceIdStr || '',\n                sampled: span.context().isSampled(),\n                baggage: span.getBaggageItem(constants.BAGGAGE_KEY)\n            };\n        }\n        return observed;\n    }\n\n    static log(...args: any[]): void {\n        // $FlowIgnore - stop complaining about property `env` not found\n        if (process.env.NODE_ENV !== 'test') {\n            console.log.apply(null, args);\n        }\n    }\n\n    static json2str(json: any): string {\n        return JSON.stringify(json);\n    }\n}\n"]}