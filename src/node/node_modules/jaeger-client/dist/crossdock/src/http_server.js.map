{"version":3,"sources":["../../../crossdock/src/http_server.js"],"names":["HttpServer","app","_tracer","_helpers","handler","use","json","endpoints","url","startRequest","forEach","endpoint","post","req","res","parentContext","extract","FORMAT_HTTP_HEADERS","headers","serverSpan","startSpan","childOf","traceRequest","body","log","serverRole","json2str","promise","handleRequest","then","response","finish","traceResponse","JSON","stringify","send","generateTraces","listen","require","main","module","http"],"mappings":";;;;;;AAaA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAWqBA,U,GAIjB,sBAAc;AAAA;;AAAA;;AACV,QAAIC,MAAM,wBAAV;AACA,SAAKC,OAAL,GAAe,qBAAW,MAAX,EAAmB,kCAAnB,EAA2C,4BAAiB,KAAjB,CAA3C,CAAf;AACA,SAAKC,QAAL,GAAgB,sBAAY,KAAKD,OAAjB,CAAhB;AACA,QAAIE,UAAU,gCAAd;;AAEA;AACAH,QAAII,GAAJ,CAAQ,qBAAWC,IAAX,EAAR;;AAEA,QAAIC,YAAwB,CACxB,EAACC,KAAK,cAAN,EAAsBC,cAAc,IAApC,EADwB,EAExB,EAACD,KAAK,aAAN,EAAqBC,cAAc,KAAnC,EAFwB,CAA5B;;AAKAF,cAAUG,OAAV,CAAkB,UAACC,QAAD,EAAc;AAC5BV,YAAIW,IAAJ,CAASD,SAASH,GAAlB,EAAuB,UAACK,GAAD,EAAMC,GAAN,EAAc;AACjC,gBAAIC,gBAAgB,MAAKb,OAAL,CAAac,OAAb,CAAqB,sBAAYC,mBAAjC,EAAsDJ,IAAIK,OAA1D,CAApB;AACA,gBAAIC,aAAa,MAAKjB,OAAL,CAAakB,SAAb,CAAuBT,SAASH,GAAhC,EAAqC,EAAEa,SAASN,aAAX,EAArC,CAAjB;AACA,gBAAIO,eAAeT,IAAIU,IAAvB;;AAEA,8BAAQC,GAAR,CAAY,MAAZ,EAAoBF,aAAaG,UAAjC,EAA6C,kBAA7C,EAAiE,kBAAQC,QAAR,CAAiBJ,YAAjB,CAAjE;;AAEA,gBAAIK,UAAe,MAAKxB,QAAL,CAAcyB,aAAd,CACfjB,SAASF,YADM,EAEfa,YAFe,EAGfH,UAHe,CAAnB;AAKAQ,oBAAQE,IAAR,CAAa,UAACC,QAAD,EAAc;AACvBX,2BAAWY,MAAX;AACA,oBAAIC,gBAAgBC,KAAKC,SAAL,CAAeJ,QAAf,CAApB;AACAhB,oBAAIqB,IAAJ,CAASH,aAAT;AACH,aAJD;AAKH,SAjBD;AAkBH,KAnBD;AAoBA/B,QAAIW,IAAJ,CAAS,gBAAT,EAA2B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrCV,gBAAQgC,cAAR,CAAuBvB,GAAvB,EAA4BC,GAA5B;AACH,KAFD;AAGAb,QAAIoC,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACnB,0BAAQb,GAAR,CAAY,uCAAZ;AACH,KAFD;AAGH,C;;kBA5CgBxB,U;;;AA+CrB,IAAKsC,OAAD,CAAeC,IAAf,KAAwBC,MAA5B,EAAoC;AAChC,QAAIC,OAAO,IAAIzC,UAAJ,EAAX;AACH","file":"http_server.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport bodyParser from 'body-parser';\nimport ConstSampler from '../../src/samplers/const_sampler.js';\nimport express from 'express';\nimport Helpers from './helpers';\nimport InMemoryReporter from '../../src/reporters/in_memory_reporter.js';\nimport opentracing from 'opentracing';\nimport Tracer from '../../src/tracer.js';\nimport EndToEndHandler from \"./endtoend_handler\";\n\nexport default class HttpServer {\n    _tracer: Tracer;\n    _helpers: Helpers;\n\n    constructor() {\n        let app = express();\n        this._tracer = new Tracer('node', new InMemoryReporter(), new ConstSampler(false));\n        this._helpers = new Helpers(this._tracer);\n        let handler = new EndToEndHandler();\n\n        // json responses need bodyParser when working with express\n        app.use(bodyParser.json());\n\n        let endpoints: Array<any> = [\n            {url: '/start_trace', startRequest: true},\n            {url: '/join_trace', startRequest: false}\n        ];\n\n        endpoints.forEach((endpoint) => {\n            app.post(endpoint.url, (req, res) => {\n                let parentContext = this._tracer.extract(opentracing.FORMAT_HTTP_HEADERS, req.headers);\n                let serverSpan = this._tracer.startSpan(endpoint.url, { childOf: parentContext });\n                let traceRequest = req.body;\n\n                Helpers.log('HTTP', traceRequest.serverRole, 'received request', Helpers.json2str(traceRequest));\n\n                let promise: any = this._helpers.handleRequest(\n                    endpoint.startRequest,\n                    traceRequest,\n                    serverSpan\n                );\n                promise.then((response) => {\n                    serverSpan.finish();\n                    let traceResponse = JSON.stringify(response);\n                    res.send(traceResponse);\n                });\n            });\n        });\n        app.post('/create_traces', (req, res) => {\n            handler.generateTraces(req, res);\n        });\n        app.listen(8081, () => {\n            Helpers.log('HTTP server listening on port 8081...');\n        });\n    }\n}\n\nif ((require: any).main === module) {\n    let http = new HttpServer();\n}\n"]}