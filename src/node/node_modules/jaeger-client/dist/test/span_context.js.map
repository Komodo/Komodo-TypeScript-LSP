{"version":3,"sources":["../../test/span_context.js"],"names":["constants","describe","LARGEST_64_BUFFER","before","Buffer","writeUInt32BE","it","traceId","encodeInt64","spanId","parentId","flags","context","withBinaryIds","deepEqual","equal","isOk","isSampled","isDebug","_flags","isNotOk","ctx1","toString","ctx2","ctx3","traceIdStr","spanIdStr","parentIdStr","fromString"],"mappings":"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","file":"span_context.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport {assert} from 'chai';\nimport * as constants from '../src/constants.js';\nimport SpanContext from '../src/span_context.js';\nimport Utils from '../src/util.js';\n\ndescribe ('SpanContext should', () => {\n    let LARGEST_64_BUFFER;\n    before (() => {\n        LARGEST_64_BUFFER = new Buffer(8);\n        LARGEST_64_BUFFER.writeUInt32BE(0xffffffff, 0);\n        LARGEST_64_BUFFER.writeUInt32BE(0xffffffff, 4);\n    });\n\n    it ('return given values as they were set', () => {\n        let traceId = Utils.encodeInt64(1);\n        let spanId = Utils.encodeInt64(2);\n        let parentId = Utils.encodeInt64(3);\n        let flags = 1;\n\n        let context = SpanContext.withBinaryIds(traceId, spanId, parentId, flags);\n\n        assert.deepEqual(traceId, context.traceId);\n        assert.deepEqual(spanId, context.spanId);\n        assert.deepEqual(parentId, context.parentId);\n        assert.equal(flags, context.flags);\n    });\n\n    it ('return IsSampled properly', () => {\n        let context = SpanContext.withBinaryIds(\n                Utils.encodeInt64(1),\n                Utils.encodeInt64(2),\n                Utils.encodeInt64(3),\n                3\n            );\n        assert.isOk(context.isSampled());\n        assert.isOk(context.isDebug());\n\n        context._flags = 0;\n        assert.isNotOk(context.isSampled());\n        assert.isNotOk(context.isDebug());\n    });\n\n    it ('format strings properly with toString', () => {\n        let ctx1 = SpanContext.withBinaryIds(Utils.encodeInt64(0x100), Utils.encodeInt64(0x7f), null, 1);\n        assert.equal(ctx1.toString(), '100:7f:0:1');\n\n        let ctx2 = SpanContext.withBinaryIds(Utils.encodeInt64(255 << 4), Utils.encodeInt64(127), Utils.encodeInt64(256), 0);\n        assert.equal(ctx2.toString(), 'ff0:7f:100:0');\n\n        // test large numbers\n        let ctx3 = SpanContext.withBinaryIds(\n            LARGEST_64_BUFFER,\n            LARGEST_64_BUFFER,\n            LARGEST_64_BUFFER,\n            0);\n        assert.equal(ctx3.toString(), 'ffffffffffffffff:ffffffffffffffff:ffffffffffffffff:0');\n        assert.equal('ffffffffffffffff', ctx3.traceIdStr);\n        assert.equal('ffffffffffffffff', ctx3.spanIdStr);\n        assert.equal('ffffffffffffffff', ctx3.parentIdStr);\n    });\n\n    it ('turn properly formatted strings into correct span contexts', () => {\n        let context = SpanContext.fromString('100:7f:0:1');\n\n        assert.deepEqual('100', context.traceIdStr);\n        assert.deepEqual(Utils.encodeInt64(0x7f), context.spanId);\n        assert.equal(null, context.parentId);\n        assert.equal(1, context.flags);\n\n        // test large numbers\n        context = SpanContext.fromString('ffffffffffffffff:ffffffffffffffff:5:1');\n        assert.equal('ffffffffffffffff', context.traceIdStr);\n        assert.equal('ffffffffffffffff', context.spanIdStr);\n        assert.deepEqual(LARGEST_64_BUFFER, context.spanId);\n        assert.deepEqual(LARGEST_64_BUFFER, context.spanId);\n        assert.deepEqual(Utils.encodeInt64(0x5), context.parentId);\n        assert.equal(context.flags, 0x1);\n    });\n\n    it ('return null on malformed traces', () => {\n        assert.equal(SpanContext.fromString('bad value'), null);\n        assert.equal(SpanContext.fromString('1:1:1:1:1'), null, 'Too many colons');\n        assert.equal(SpanContext.fromString('1:1:1'), null, 'Too few colons');\n        assert.equal(SpanContext.fromString('x:1:1:1'), null, 'Not all numbers');\n        assert.equal(SpanContext.fromString('1:x:1:1'), null, 'Not all numbers');\n        assert.equal(SpanContext.fromString('1:1:x:1'), null, 'Not all numbers');\n        assert.equal(SpanContext.fromString('1:1:1:x'),  null, 'Not all numbers');\n        assert.equal(SpanContext.fromString('0:1:1:1'), null, 'Trace ID cannot be zero');\n    });\n});\n"]}